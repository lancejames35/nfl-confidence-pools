<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-2">
                        <li class="breadcrumb-item">
                            <a href="/dashboard" class="text-decoration-none">Dashboard</a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <%= league.league_name %>
                        </li>
                    </ol>
                </nav>
                <h1 class="display-5 mb-0">
                    <i class="fas fa-users text-primary me-3"></i>
                    <%= league.league_name %>
                </h1>
            </div>
            <div class="btn-group" role="group">
                <% if (isCommissioner) { %>
                    <button type="button" class="btn btn-outline-primary" id="settingsToggleBtn">
                        <i class="fas fa-cog me-2"></i>
                        Settings
                    </button>
                <% } else { %>
                    <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#leaveModal">
                        <i class="fas fa-sign-out-alt me-2"></i>
                        Leave League
                    </button>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- League Settings (Collapsible) -->
<% if (isCommissioner) { %>
<div class="collapse" id="leagueSettings">
    <div class="card border-warning mb-4">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
                <i class="fas fa-cog me-2"></i>
                League Settings
            </h5>
        </div>
        <div class="card-body">
            <div id="leagueSettingsForm">
                <!-- Basic Information -->
                <h6 class="text-muted mb-3"><i class="fas fa-info-circle me-2"></i>Basic Information</h6>
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label for="league_name" class="form-label">League Name</label>
                        <input type="text" class="form-control" id="league_name" name="league_name" value="<%= league.league_name %>" required maxlength="50">
                    </div>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="3" maxlength="500" placeholder="Optional league description..."><%= league.description || '' %></textarea>
                </div>
                
                <!-- League Settings -->
                <h6 class="text-muted mb-3 mt-4"><i class="fas fa-cogs me-2"></i>League Settings</h6>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="privacy" class="form-label">Privacy</label>
                        <select class="form-select" id="privacy" name="privacy" required>
                            <option value="private" <%= (league.privacy || 'private') === 'private' ? 'selected' : '' %>>Private (Join code required)</option>
                            <option value="invite_only" <%= league.privacy === 'invite_only' ? 'selected' : '' %>>Invite Only</option>
                            <option value="public" <%= league.privacy === 'public' ? 'selected' : '' %>>Public (Anyone can find)</option>
                        </select>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="max_participants" class="form-label">Max Participants</label>
                        <div class="input-group">
                            <input type="number" class="form-control" id="max_participants" name="max_participants" 
                                   value="<%= (league.max_participants && league.max_participants < 999) ? league.max_participants : 50 %>" 
                                   min="2" max="500" <%= (!league.max_participants || league.max_participants >= 999) ? 'disabled' : '' %>>
                            <div class="input-group-text">
                                <input class="form-check-input mt-0" type="checkbox" id="unlimited_participants" 
                                       <%= (!league.max_participants || league.max_participants >= 999) ? 'checked' : '' %>>
                                <label class="form-check-label ms-1" for="unlimited_participants">Unlimited</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="max_entries" class="form-label">Max Entries per User</label>
                        <select class="form-select" id="max_entries" name="max_entries">
                            <option value="1" <%= league.max_entries == 1 ? 'selected' : '' %>>1 Entry</option>
                            <option value="2" <%= league.max_entries == 2 ? 'selected' : '' %>>2 Entries</option>
                            <option value="3" <%= league.max_entries == 3 ? 'selected' : '' %>>3 Entries</option>
                            <option value="4" <%= league.max_entries == 4 ? 'selected' : '' %>>4 Entries</option>
                            <option value="5" <%= league.max_entries == 5 ? 'selected' : '' %>>5 Entries</option>
                            <option value="999" <%= (!league.max_entries || league.max_entries >= 999) ? 'selected' : '' %>>Unlimited</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3" id="entry-fee-section">
                        <label for="entry_fee" class="form-label">Entry Fee ($)</label>
                        <input type="number" class="form-control" id="entry_fee" name="entry_fee" value="<%= league.entry_fee %>" min="0" max="1000" step="0.01">
                        <div class="form-text">Set to 0 for free leagues</div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-check mt-4">
                            <input class="form-check-input" type="checkbox" id="enable_multi_tier" name="enable_multi_tier" <%= league.enable_multi_tier ? 'checked' : '' %>>
                            <label class="form-check-label" for="enable_multi_tier">
                                Enable Multiple Entry Levels
                            </label>
                        </div>
                        <div class="form-text">Allow different participation levels with different fees</div>
                    </div>
                </div>
                
                <!-- Multi-Tier Entry Fee Settings -->
                <div id="multi-tier-settings" style="display: none;">
                    <div class="card mt-3">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0"><i class="fas fa-layer-group me-2"></i>Entry Level Tiers</h6>
                            <button type="button" class="btn btn-sm btn-success" id="addTierBtn">
                                <i class="fas fa-plus me-1"></i>Add Tier
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="tiers-container">
                                <!-- Display existing tiers or default tiers -->
                                <% if (locals.tiers && tiers.length > 0) { %>
                                    <% tiers.forEach((tier, index) => { %>
                                        <div class="tier-row" data-tier="<%= index + 1 %>">
                                            <div class="row mb-3">
                                                <div class="col-md-4">
                                                    <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                                                    <input type="text" class="form-control" name="tier_name[]" value="<%= tier.tier_name %>" placeholder="e.g., Standard" required>
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                                                    <input type="number" class="form-control" name="tier_fee[]" value="<%= tier.entry_fee %>" min="0" step="0.01" required>
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label">Description <span class="text-danger">*</span></label>
                                                    <input type="text" class="form-control" name="tier_description[]" value="<%= tier.tier_description || '' %>" placeholder="Describe what this tier includes" required>
                                                </div>
                                                <div class="col-md-1">
                                                    <label class="form-label">&nbsp;</label>
                                                    <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier" <%= index === 0 ? 'disabled' : '' %>>
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <!-- Default tiers when multi-tier is first enabled -->
                                    <div class="tier-row" data-tier="1">
                                        <div class="row mb-3">
                                            <div class="col-md-4">
                                                <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" name="tier_name[]" value="" placeholder="e.g., Standard" required>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                                                <input type="number" class="form-control" name="tier_fee[]" value="<%= league.entry_fee || 0 %>" min="0" step="0.01" required>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Description <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" name="tier_description[]" value="" placeholder="Describe what this tier includes" required>
                                            </div>
                                            <div class="col-md-1">
                                                <label class="form-label">&nbsp;</label>
                                                <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier" disabled>
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tier-row" data-tier="2">
                                        <div class="row mb-3">
                                            <div class="col-md-4">
                                                <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" name="tier_name[]" value="" placeholder="e.g., Premium" required>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                                                <input type="number" class="form-control" name="tier_fee[]" value="<%= (league.entry_fee || 0) * 2 %>" min="0" step="0.01" required>
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Description <span class="text-danger">*</span></label>
                                                <input type="text" class="form-control" name="tier_description[]" value="" placeholder="Describe what this tier includes" required>
                                            </div>
                                            <div class="col-md-1">
                                                <label class="form-label">&nbsp;</label>
                                                <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="alert alert-info mt-3">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Tip:</strong> Users can choose their participation level when joining. Higher tiers typically include all benefits of lower tiers plus additional prize pools.
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Confidence Pool Settings -->
                <div id="confidence-settings" style="display: none;">
                    <h6 class="text-muted mb-3 mt-4"><i class="fas fa-football me-2"></i>Confidence Pool Settings</h6>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="pick_method" class="form-label">Pick Method</label>
                            <select class="form-select" id="pick_method" name="pick_method">
                                <option value="straight_up" <%= (league.pick_method || 'straight_up') === 'straight_up' ? 'selected' : '' %>>Straight Up (Pick winners)</option>
                                <option value="against_spread" <%= league.pick_method === 'against_spread' ? 'selected' : '' %>>Against the Spread</option>
                            </select>
                            <div class="form-text">Straight up picks team to win. Spread picks team to cover the point spread.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="point_system" class="form-label">Point System</label>
                            <select class="form-select" id="point_system" name="point_system">
                                <option value="standard" <%= (league.point_system || 'standard') === 'standard' ? 'selected' : '' %>>Standard (1, 2, 3, 4... points)</option>
                                <option value="multiplier" <%= league.point_system === 'multiplier' ? 'selected' : '' %>>Multiplier (confidence × multiplier)</option>
                            </select>
                            <div class="form-text">Higher confidence picks are worth more points if correct.</div>
                        </div>
                    </div>
                    
                    <!-- Multiplier Setting -->
                    <div class="row" id="multiplier-setting" style="display: none;">
                        <div class="col-md-4 mb-3">
                            <label for="point_multiplier" class="form-label">Point Multiplier</label>
                            <input type="number" class="form-control" id="point_multiplier" name="point_multiplier" value="<%= league.point_multiplier || 2 %>" min="1" max="10" step="0.5">
                            <div class="form-text">×2 = (2, 4, 6...), ×5 = (5, 10, 15...)</div>
                        </div>
                        <div class="col-md-8 mb-3">
                            <label class="form-label text-muted">Point Preview</label>
                            <div class="border rounded p-2 bg-light">
                                <small class="text-muted" id="point-preview">Confidence 1 = 2 pts, Confidence 2 = 4 pts, Confidence 16 = 32 pts</small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Deadline Settings -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="deadline_type" class="form-label">Pick Deadline</label>
                            <select class="form-select" id="deadline_type" name="deadline_type">
                                <option value="per_game" <%= (league.deadline_type || 'per_game') === 'per_game' ? 'selected' : '' %>>Per Game (locks when each game starts)</option>
                                <option value="league_wide" <%= league.deadline_type === 'league_wide' ? 'selected' : '' %>>League-wide (all picks lock at same time)</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3" id="league_deadline_time" style="display: none;">
                            <label for="weekly_deadline" class="form-label">Weekly Deadline</label>
                            <select class="form-select" id="weekly_deadline" name="weekly_deadline">
                                <option value="first_game" <%= (league.weekly_deadline || 'first_game') === 'first_game' ? 'selected' : '' %>>Before 1st Game Kickoff</option>
                                <option value="thursday_night" <%= league.weekly_deadline === 'thursday_night' ? 'selected' : '' %>>Thursday Night Game</option>
                                <option value="sunday_early" <%= league.weekly_deadline === 'sunday_early' ? 'selected' : '' %>>Sunday Early Games (1:00 PM ET)</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Tiebreaker Settings -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="primary_tiebreaker" class="form-label">Primary Tiebreaker</label>
                            <select class="form-select" id="primary_tiebreaker" name="primary_tiebreaker">
                                <option value="head_to_head" <%= (league.settings && league.settings.primary_tiebreaker === 'head_to_head') ? 'selected' : '' %>>Head to Head</option>
                                <option value="mnf_total" <%= (league.settings && league.settings.primary_tiebreaker === 'mnf_total') ? 'selected' : '' %>>Monday Night Football Total Points</option>
                                <option value="highest_confidence_correct" <%= (league.settings && league.settings.primary_tiebreaker === 'highest_confidence_correct') ? 'selected' : '' %>>Highest Confidence Correct</option>
                                <option value="total_games_correct" <%= (league.settings && league.settings.primary_tiebreaker === 'total_games_correct') ? 'selected' : '' %>>Total Games Correct</option>
                            </select>
                            <div class="form-text">Used to resolve ties in weekly and season standings</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="secondary_tiebreaker" class="form-label">Secondary Tiebreaker</label>
                            <select class="form-select" id="secondary_tiebreaker" name="secondary_tiebreaker">
                                <option value="head_to_head" <%= (league.settings && league.settings.secondary_tiebreaker === 'head_to_head') ? 'selected' : '' %>>Head to Head</option>
                                <option value="mnf_total" <%= (league.settings && league.settings.secondary_tiebreaker === 'mnf_total') ? 'selected' : '' %>>Monday Night Football Total Points</option>
                                <option value="highest_confidence_correct" <%= (league.settings && league.settings.secondary_tiebreaker === 'highest_confidence_correct') ? 'selected' : '' %>>Highest Confidence Correct</option>
                                <option value="total_games_correct" <%= (league.settings && league.settings.secondary_tiebreaker === 'total_games_correct') ? 'selected' : '' %>>Total Games Correct</option>
                            </select>
                            <div class="form-text">Applied if primary tiebreaker results in a tie</div>
                        </div>
                    </div>
                </div>
                
                <!-- Payout Settings -->
                <h6 class="text-muted mb-3 mt-4"><i class="fas fa-money-bill-wave me-2"></i>Payout Settings</h6>
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="payout_calculations_enabled" 
                                       name="payout_calculations_enabled">
                                <label class="form-check-label" for="payout_calculations_enabled">
                                    <strong>Enable Automatic Payout Calculations</strong>
                                </label>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="recalculate-purse-btn">
                                <i class="fas fa-sync-alt me-1"></i>Recalculate Purse
                            </button>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <!-- Purse Information (Always Visible) -->
                        <div class="bg-info-subtle border border-info rounded p-3 mb-3">
                            <div class="row text-center">
                                <div class="col-6 col-md-3">
                                    <div class="h5 mb-1 text-info">$<span id="totalPurse">0.00</span></div>
                                    <small class="text-muted">Total Purse</small>
                                </div>
                                <div class="col-6 col-md-3">
                                    <div class="h5 mb-1 text-warning">$<span id="expenseAmount">0.00</span></div>
                                    <small class="text-muted">Expenses</small>
                                </div>
                                <div class="col-6 col-md-3">
                                    <div class="h5 mb-1 text-success">$<span id="netPurse">0.00</span></div>
                                    <small class="text-muted">Net Purse</small>
                                </div>
                                <div class="col-6 col-md-3">
                                    <div class="h5 mb-1" id="unallocatedContainer">
                                        <span class="text-secondary">$<span id="unallocatedAmount">0.00</span></span>
                                    </div>
                                    <small class="text-muted">Unallocated</small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Manual Message Mode -->
                        <div id="manualPayoutMode" style="display: none;">
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Manual Payout Mode:</strong> Automatic calculations are disabled. You can enter a custom message for the dashboard.
                            </div>
                            <div class="mb-3">
                                <label for="manual_payout_message" class="form-label">Payout Message for Dashboard</label>
                                <textarea class="form-control" id="manual_payout_message" name="manual_payout_message" rows="3"
                                          placeholder="Enter a message about payouts that will be displayed on the dashboard..."></textarea>
                                <div class="form-text">This message will appear on the dashboard instead of calculated payouts.</div>
                            </div>
                        </div>
                        
                        <!-- Automatic Calculation Mode -->
                        <div id="automaticPayoutMode" style="display: none;">
                            <!-- LEVEL 1: Pool Allocation -->
                            <h6 class="text-primary mb-3 mt-3">
                                <i class="fas fa-layer-group me-2"></i>Level 1: Pool Allocation
                            </h6>
                            
                            <!-- Expenses -->
                            <div class="card mb-3 border-warning">
                                <div class="card-header bg-warning-subtle">
                                    <strong><i class="fas fa-receipt me-2"></i>Expenses</strong>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label for="expense_amount" class="form-label">Amount ($)</label>
                                            <input type="number" class="form-control" id="expense_amount" name="expense_amount" 
                                                   value="0" min="0" step="0.01">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="expense_description" class="form-label">Description</label>
                                            <input type="text" class="form-control" id="expense_description" name="expense_description" 
                                                   placeholder="Website fees, prizes, etc.">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Weekly Pool -->
                            <div class="card mb-3 border-primary">
                                <div class="card-header bg-primary-subtle">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="weekly_pool_enabled" 
                                               name="weekly_pool_enabled">
                                        <label class="form-check-label" for="weekly_pool_enabled">
                                            <strong><i class="fas fa-calendar-week me-2"></i>Weekly Pool</strong>
                                        </label>
                                    </div>
                                </div>
                                <div class="card-body" id="weeklyPoolSettings">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Pool Allocation</label>
                                            <div class="input-group">
                                                <select class="form-select" id="weekly_pool_type" style="max-width: 140px;">
                                                    <option value="percentage" selected>% of Net</option>
                                                    <option value="fixed">Fixed $</option>
                                                </select>
                                                <input type="number" class="form-control" id="weekly_pool_percentage" 
                                                       value="70" min="0" max="100" step="0.01">
                                                <span class="input-group-text" id="weekly_pool_suffix">%</span>
                                            </div>
                                            <div class="form-text">Total pool: $<span id="weeklyPoolTotal">0.00</span> | Per week: $<span id="weeklyPoolPerWeek">0.00</span></div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Positions to Pay</label>
                                            <div class="input-group">
                                                <button type="button" class="btn btn-outline-secondary" data-action="weekly-decrease">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <input type="number" class="form-control text-center" id="weekly_positions" 
                                                       name="weekly_positions" value="3" min="1" max="10" readonly>
                                                <button type="button" class="btn btn-outline-secondary" data-action="weekly-increase">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                            <div class="form-text">Pay top <span id="weeklyPositionsLabel">3</span> positions each week</div>
                                        </div>
                                    </div>
                                    
                                    <!-- LEVEL 2: Weekly Position Distribution -->
                                    <h6 class="text-secondary mb-2">
                                        <i class="fas fa-trophy me-2"></i>Level 2: Position Distribution
                                    </h6>
                                    <div id="weeklyPositionBreakdown">
                                        <!-- Generated dynamically -->
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Season Pool -->
                            <div class="card border-success">
                                <div class="card-header bg-success-subtle">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="season_pool_enabled" 
                                               name="season_pool_enabled">
                                        <label class="form-check-label" for="season_pool_enabled">
                                            <strong><i class="fas fa-crown me-2"></i>Season Pool</strong>
                                        </label>
                                    </div>
                                </div>
                                <div class="card-body" id="seasonPoolSettings">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Pool Allocation</label>
                                            <div class="input-group">
                                                <select class="form-select" id="season_pool_type" style="max-width: 140px;">
                                                    <option value="percentage" selected>% of Net</option>
                                                    <option value="fixed">Fixed $</option>
                                                </select>
                                                <input type="number" class="form-control" id="season_pool_percentage" 
                                                       value="30" min="0" max="100" step="0.01">
                                                <span class="input-group-text" id="season_pool_suffix">%</span>
                                            </div>
                                            <div class="form-text">Total pool: $<span id="seasonPoolTotal">0.00</span></div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Positions to Pay</label>
                                            <div class="input-group">
                                                <button type="button" class="btn btn-outline-secondary" data-action="season-decrease">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <input type="number" class="form-control text-center" id="season_positions" 
                                                       name="season_positions" value="3" min="1" max="10" readonly>
                                                <button type="button" class="btn btn-outline-secondary" data-action="season-increase">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                            <div class="form-text">Pay top <span id="seasonPositionsLabel">3</span> positions at season end</div>
                                        </div>
                                    </div>
                                    
                                    <!-- LEVEL 2: Season Position Distribution -->
                                    <h6 class="text-secondary mb-2">
                                        <i class="fas fa-medal me-2"></i>Level 2: Position Distribution
                                    </h6>
                                    <div id="seasonPositionBreakdown">
                                        <!-- Generated dynamically -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex justify-content-between mt-4">
                    <div>
                        <button type="button" class="btn btn-secondary me-2" id="cancelSettingsBtn">Cancel</button>
                        <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                            <i class="fas fa-trash me-2"></i>
                            Delete League
                        </button>
                    </div>
                    <button type="button" class="btn btn-warning" id="saveSettingsBtn">
                        <i class="fas fa-save me-2"></i>
                        Save Settings
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- League Overview Cards -->
<div class="row g-3 mb-4">
    <div class="col-6 col-lg-3">
        <div class="card bg-primary text-white h-100">
            <div class="card-body text-center p-3">
                <i class="fas fa-users fa-lg mb-2"></i>
                <h6 class="card-title mb-1"><%= league.member_count %>/<%= league.max_participants %></h6>
                <p class="card-text mb-0 small">Members</p>
            </div>
        </div>
    </div>
    
    <div class="col-6 col-lg-3">
        <div class="card bg-success text-white h-100">
            <div class="card-body text-center p-3">
                <i class="fas fa-list-ol fa-lg mb-2"></i>
                <h6 class="card-title mb-1"><%= league.entry_count %></h6>
                <p class="card-text mb-0 small">Total Entries</p>
            </div>
        </div>
    </div>
    
    <div class="col-6 col-lg-3">
        <div class="card bg-warning text-dark h-100">
            <div class="card-body text-center p-3">
                <i class="fas fa-football-ball fa-lg mb-2"></i>
                <h6 class="card-title mb-1"><%= league.pool_type.charAt(0).toUpperCase() + league.pool_type.slice(1) %></h6>
                <p class="card-text mb-0 small">Pool Type</p>
            </div>
        </div>
    </div>
    
    <div class="col-6 col-lg-3">
        <div class="card bg-info text-white h-100">
            <div class="card-body text-center p-3">
                <i class="fas fa-<%= league.enable_multi_tier ? 'layer-group' : (league.entry_fee > 0 ? 'dollar-sign' : 'gift') %> fa-lg mb-2"></i>
                <h6 class="card-title mb-1">
                    <% if (league.enable_multi_tier) { %>
                        Multi-Tier
                    <% } else if (league.entry_fee > 0) { %>
                        $<%= parseFloat(league.entry_fee).toFixed(2) %>
                    <% } else { %>
                        Free
                    <% } %>
                </h6>
                <p class="card-text mb-0 small">
                    Entry Fee
                </p>
            </div>
        </div>
    </div>
</div>

<!-- League Information and Commissioner Messages Row -->
<div class="row g-3 mb-4">
    <!-- League Information -->
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-info-circle me-2"></i>
                    League Information
                </h5>
            </div>
            <div class="card-body">
                <% if (league.description && league.description.trim()) { %>
                    <div class="row mb-3">
                        <div class="col-12">
                            <strong class="text-muted">Description:</strong>
                            <p class="mb-0 mt-1"><%= league.description %></p>
                        </div>
                    </div>
                <% } %>
                
                <div class="row align-items-center">
                    <div class="col-lg-3 col-md-6 mb-2">
                        <strong class="text-muted">Commissioner:</strong><br>
                        <i class="fas fa-crown text-warning me-1"></i>
                        <%= league.commissioner_name %>
                    </div>
                    <div class="col-lg-2 col-md-6 mb-2">
                        <strong class="text-muted">Season:</strong><br>
                        <i class="fas fa-calendar me-1"></i>
                        <%= league.season_year %>
                    </div>
                    <div class="col-lg-2 col-md-6 mb-2">
                        <strong class="text-muted">Privacy:</strong><br>
                        <i class="fas fa-<%= league.privacy === 'public' ? 'globe' : league.privacy === 'private' ? 'lock' : 'user-shield' %> me-1"></i>
                        <%= league.privacy.charAt(0).toUpperCase() + league.privacy.slice(1).replace('_', ' ') %>
                    </div>
                    <div class="col-lg-2 col-md-6 mb-2">
                        <strong class="text-muted">Status:</strong><br>
                        <span class="badge <%= league.status === 'active' ? 'bg-success' : league.status === 'draft' ? 'bg-warning text-dark' : 'bg-secondary' %>">
                            <%= league.status.charAt(0).toUpperCase() + league.status.slice(1) %>
                        </span>
                    </div>
                    <% if (isCommissioner) { %>
                    <div class="col-lg-3 col-12 mb-2">
                        <strong class="text-muted">Join Code:</strong><br>
                        <div class="d-flex align-items-center">
                            <code class="me-2" id="joinCode"><%= league.join_code %></code>
                            <button type="button" class="btn btn-sm btn-outline-primary me-1" id="copyJoinCodeBtn" title="Copy join code">
                                <i class="fas fa-copy"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-warning" id="regenerateJoinCodeBtn" title="Generate new code">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Commissioner Messages -->
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-bullhorn me-2"></i>
                    Commissioner Messages
                </h5>
                <% if (isCommissioner) { %>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#postMessageModal">
                        <i class="fas fa-plus me-1"></i>Post Message
                    </button>
                <% } %>
            </div>
            <div class="card-body p-2" id="commissionerMessages" style="max-height: 300px; overflow-y: auto;">
                <!-- Commissioner messages will be loaded here -->
                <div class="text-muted text-center py-3">
                    <i class="fas fa-message me-2"></i>
                    No messages posted yet
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Members List -->
<div class="row">
    <div class="col-12">
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-users me-2"></i>
                    Members (<%= members.length %>)
                </h5>
                <% if (isCommissioner && members.length < league.max_participants) { %>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#inviteModal">
                        <i class="fas fa-plus me-1"></i>
                        Invite
                    </button>
                <% } %>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Member</th>
                                <th class="d-none d-md-table-cell">Email</th>
                                <th>Tier</th>
                                <th class="text-center">Status</th>
                                <% if (isCommissioner) { %>
                                    <th class="text-center">Actions</th>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <% members.forEach(member => { %>
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2 flex-shrink-0">
                                                <%= member.username.charAt(0).toUpperCase() %>
                                            </div>
                                            <div class="min-w-0">
                                                <div class="fw-semibold d-flex align-items-center">
                                                    <%= member.username %>
                                                    <% if (member.user_id === league.commissioner_id) { %>
                                                        <i class="fas fa-crown text-warning ms-1" title="Main Commissioner"></i>
                                                    <% } else if (member.role === 'co_commissioner') { %>
                                                        <i class="fas fa-crown text-info ms-1" title="Co-Commissioner"></i>
                                                    <% } %>
                                                </div>
                                                <% if (member.first_name || member.last_name) { %>
                                                    <small class="text-muted">
                                                        <%= (member.first_name || '').trim() %> <%= (member.last_name || '').trim() %>
                                                    </small>
                                                <% } %>
                                                <div class="d-md-none mt-1">
                                                    <small class="text-muted">📧 <%= member.email || 'N/A' %></small>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        <small class="text-muted">
                                            <%= member.email || 'N/A' %>
                                        </small>
                                    </td>
                                    <td>
                                        <% 
                                        const userTier = member.tier_name || 'Standard';
                                        const tierFee = parseFloat(member.tier_fee || league.entry_fee || 0);
                                        const tierColor = userTier === 'Standard' ? 'secondary' : userTier === 'Premium' ? 'warning' : 'success';
                                        %>
                                        <div>
                                            <span class="badge bg-<%= tierColor %> <%= tierColor === 'warning' ? 'text-dark' : '' %>">
                                                <%= userTier %>
                                            </span>
                                            <div class="small text-muted mt-1">
                                                $<%= tierFee.toFixed(2) %>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <% 
                                        const amountPaid = parseFloat(member.amount_paid) || 0;
                                        // Calculate amount owed based on tier fee or league entry fee
                                        let baseAmount = 0;
                                        if (member.amount_owed && member.amount_owed > 0) {
                                            baseAmount = parseFloat(member.amount_owed);
                                        } else if (member.entry_fee && member.entry_fee > 0) {
                                            baseAmount = parseFloat(member.entry_fee);
                                        } else if (league.entry_fee && league.entry_fee > 0) {
                                            baseAmount = parseFloat(league.entry_fee);
                                        }
                                        const amountOwed = baseAmount * parseInt(member.entry_count || 1);
                                        const tolerance = 0.01; // Small tolerance for floating point comparison
                                        %>
                                        <div class="d-flex flex-column align-items-center">
                                            <% if (amountOwed === 0) { %>
                                                <span class="badge bg-success mb-1">Free</span>
                                            <% } else if (Math.abs(amountPaid - amountOwed) < tolerance) { %>
                                                <span class="badge bg-success mb-1">Paid</span>
                                                <small class="text-muted">$<%= amountPaid.toFixed(2) %></small>
                                            <% } else if (amountPaid > amountOwed + tolerance) { %>
                                                <span class="badge bg-info mb-1">Overpaid</span>
                                                <small class="text-muted">$<%= amountPaid.toFixed(2) %> / $<%= amountOwed.toFixed(2) %></small>
                                            <% } else if (amountPaid > tolerance) { %>
                                                <span class="badge bg-warning mb-1">Partial Payment</span>
                                                <small class="text-muted">$<%= amountPaid.toFixed(2) %> / $<%= amountOwed.toFixed(2) %></small>
                                            <% } else { %>
                                                <span class="badge bg-danger mb-1">Unpaid</span>
                                                <small class="text-muted">$<%= amountOwed.toFixed(2) %></small>
                                            <% } %>
                                            
                                            <% if (member.entry_count > 1) { %>
                                                <small class="text-muted mt-1"><%= member.entry_count %> entries</small>
                                            <% } %>
                                        </div>
                                        
                                        <div class="mt-2">
                                            <small class="text-muted d-block">
                                                Joined <%= new Date(member.joined_at).toLocaleDateString() %>
                                            </small>
                                        </div>
                                    </td>
                                    <% if (isCommissioner) { %>
                                        <td class="text-center">
                                            <button type="button" 
                                                    class="btn btn-sm btn-outline-primary edit-member-btn"
                                                        data-user-id="<%= member.user_id %>"
                                                        data-username="<%= member.username %>"
                                                        data-first-name="<%= member.first_name || '' %>"
                                                        data-last-name="<%= member.last_name || '' %>"
                                                        data-email="<%= member.email %>"
                                                        data-tier="<%= member.tier_name || 'Standard' %>"
                                                        data-tier-id="<%= member.tier_id || '' %>"
                                                        data-payment-status="<%= member.payment_status || 'unpaid' %>"
                                                        data-amount-owed="<%= member.amount_owed || league.entry_fee || 0 %>"
                                                        data-amount-paid="<%= member.amount_paid || 0 %>"
                                                        data-entry-count="<%= member.entry_count || 1 %>"
                                                        data-role="<%= member.role || 'participant' %>"
                                                        title="Edit member">
                                                    <i class="fas fa-edit me-1"></i>Edit
                                                </button>
                                        </td>
                                    <% } %>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Member Modal -->
<% if (isCommissioner) { %>
<div class="modal fade" id="editMemberModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit me-2"></i>
                    Edit Member: <span id="editMemberName"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-user me-2"></i>Member Information
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Username</label>
                                    <input type="text" class="form-control" id="editUsername">
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">First Name</label>
                                            <input type="text" class="form-control" id="editFirstName">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Last Name</label>
                                            <input type="text" class="form-control" id="editLastName">
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" id="editEmail">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">New Password</label>
                                    <input type="password" class="form-control" id="editPassword" placeholder="Leave blank to keep current password">
                                    <div class="form-text">Enter a new password to change it, or leave blank to keep existing</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Role</label>
                                    <div class="input-group">
                                        <span class="input-group-text" id="editRoleIcon">👤</span>
                                        <input type="text" class="form-control" id="editRoleDisplay" readonly>
                                    </div>
                                    <div class="form-text">
                                        Use the "Make Commissioner" button below to change roles
                                    </div>
                                </div>
                                <div class="mb-3" id="editTierSection" style="<%= league.enable_multi_tier ? '' : 'display: none;' %>">
                                    <label class="form-label">Tier</label>
                                    <select class="form-select" id="editTier">
                                        <!-- Options will be populated dynamically -->
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-dollar-sign me-2"></i>Payment Information
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Entries</label>
                                    <div class="form-control-plaintext bg-light border rounded px-3 py-2">
                                        <strong id="editEntryCountDisplay">1</strong>
                                    </div>
                                    <div class="form-text">Number of entries for this member (display only)</div>
                                    <input type="hidden" id="editEntryCount" value="1">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Amount Owed</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control" id="editAmountOwed" step="0.01" readonly>
                                    </div>
                                    <div class="form-text">Calculated: Entry Fee × Entries × Tier Multiplier</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Amount Paid</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="number" class="form-control" id="editAmountPaid" step="0.01">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Payment Status</label>
                                    <div class="input-group">
                                        <span class="input-group-text" id="paymentStatusIcon">📋</span>
                                        <input type="text" class="form-control" id="editPaymentStatus" readonly>
                                    </div>
                                    <div class="form-text">Automatically calculated based on amount paid vs owed</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Payment Method</label>
                                    <select class="form-select" id="editPaymentMethod">
                                        <option value="">Select method...</option>
                                        <option value="cash">Cash</option>
                                        <option value="venmo">Venmo</option>
                                        <option value="paypal">PayPal</option>
                                        <option value="zelle">Zelle</option>
                                        <option value="check">Check</option>
                                        <option value="other">Other</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="fas fa-cogs me-2"></i>Administrative Actions
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        <button type="button" class="btn btn-warning w-100" id="makeCommissionerBtn">
                                            <i class="fas fa-crown me-2"></i>Make Co-Commissioner
                                        </button>
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <button type="button" class="btn btn-danger w-100" id="removeMemberBtn">
                                            <i class="fas fa-user-times me-2"></i>Remove Member
                                        </button>
                                    </div>
                                </div>
                                <div class="alert alert-warning mt-3 mb-0">
                                    <small>
                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                        <strong>Note:</strong> Making someone commissioner will transfer full control of this league to them. This action cannot be undone.
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="saveMemberChangesBtn">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Invite Modal -->
<% if (isCommissioner) { %>
<div class="modal fade" id="inviteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus me-2"></i>
                    Invite Members
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Share Join Code</label>
                    <div class="input-group">
                        <input type="text" class="form-control" value="<%= league.join_code %>" readonly id="inviteJoinCode">
                        <button class="btn btn-outline-primary copy-join-code-btn" type="button" data-target="inviteJoinCode">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="form-text">Share this code with friends to join your league</div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Share Join Link</label>
                    <div class="input-group">
                        <input type="text" class="form-control" value="<%= `${baseUrl}/leagues/join?code=${league.join_code}` %>" readonly id="inviteLink">
                        <button class="btn btn-outline-primary copy-join-code-btn" type="button" data-target="inviteLink">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="form-text">Direct link to join your league</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-warning" id="regenerateJoinCodeModalBtn">
                    <i class="fas fa-sync-alt me-2"></i>
                    Generate New Code
                </button>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Leave League Modal -->
<% if (!isCommissioner) { %>
<div class="modal fade" id="leaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Leave League
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to leave <strong><%= league.league_name %></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone. You will need a new invitation to rejoin.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="POST" action="/leagues/<%= league.league_id %>/leave" class="d-inline">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-sign-out-alt me-2"></i>
                        Leave League
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Delete League Modal -->
<% if (isCommissioner) { %>
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Delete League
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to permanently delete <strong><%= league.league_name %></strong>?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone. All league data, picks, and results will be permanently deleted.
                </div>
                <p><strong>Type the league name to confirm:</strong></p>
                <input type="text" class="form-control" id="confirmLeagueName" placeholder="<%= league.league_name %>">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn" disabled>
                    <i class="fas fa-trash me-2"></i>
                    Delete League
                </button>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Post Message Modal -->
<% if (isCommissioner) { %>
<div class="modal fade" id="postMessageModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-bullhorn me-2"></i>
                    Post Commissioner Message
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="messageTitle" class="form-label">Message Title</label>
                    <input type="text" class="form-control" id="messageTitle" placeholder="Enter message title..." maxlength="100" required>
                </div>
                <div class="mb-3">
                    <label for="messageContent" class="form-label">Message Content</label>
                    <textarea class="form-control" id="messageContent" rows="4" placeholder="Enter your message to all league members..." maxlength="1000" required></textarea>
                    <div class="form-text">This message will be visible to all league members on their dashboard.</div>
                </div>
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="messageImportant">
                        <label class="form-check-label" for="messageImportant">
                            Mark as important (will be highlighted)
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="postMessageBtn">
                    <i class="fas fa-paper-plane me-2"></i>Post Message
                </button>
            </div>
        </div>
    </div>
</div>
<% } %>

<style>
.avatar-sm {
    width: 32px;
    height: 32px;
    font-size: 0.875rem;
    font-weight: 600;
}

/* Mobile responsive improvements */
@media (max-width: 576px) {
    .card-body.p-3 {
        padding: 0.75rem !important;
    }
    
    .card-title {
        font-size: 1rem;
    }
    
    .fa-lg {
        font-size: 1.2em;
    }
    
    .btn-xs {
        padding: 0.125rem 0.25rem;
        font-size: 0.75rem;
    }
}


/* Table improvements */
.table th {
    border-top: none;
    font-weight: 600;
    font-size: 0.875rem;
}

.min-w-0 {
    min-width: 0;
}

.flex-shrink-0 {
    flex-shrink: 0;
}

/* Badge improvements */
.badge {
    font-weight: 500;
}

/* Mobile member cards */
@media (max-width: 767px) {
    .table-responsive {
        border: none;
    }
    
    .table td {
        padding: 0.75rem 0.5rem;
        border-top: 1px solid #dee2e6;
    }
    
    .table td:first-child {
        padding-left: 1rem;
    }
    
    .table td:last-child {
        padding-right: 1rem;
    }
}
</style>

<script>
function copyJoinCode(elementId = 'joinCode') {
    const element = document.getElementById(elementId);
    const text = element.tagName === 'INPUT' ? element.value : element.textContent;
    
    navigator.clipboard.writeText(text).then(function() {
        showToast('Join code copied to clipboard!', 'success');
    }).catch(function(err) {
        console.error('Could not copy text: ', err);
        showToast('Failed to copy join code', 'error');
    });
}

function regenerateJoinCode() {
    if (!confirm('Generate a new join code? The old code will stop working immediately.')) {
        return;
    }
    
    fetch(`/leagues/<%= league.league_id %>/regenerate-code`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('joinCode').textContent = data.joinCode;
            const inviteCode = document.getElementById('inviteJoinCode');
            const inviteLink = document.getElementById('inviteLink');
            if (inviteCode) inviteCode.value = data.joinCode;
            if (inviteLink) {
                inviteLink.value = inviteLink.value.replace(/code=[A-Z0-9]+/, `code=${data.joinCode}`);
            }
            showToast('New join code generated successfully!', 'success');
        } else {
            showToast(data.message || 'Failed to generate new join code', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error generating new join code', 'error');
    });
}

function removeMember(userId, username) {
    if (!confirm(`Remove ${username} from the league?`)) {
        return;
    }
    
    fetch(`/leagues/<%= league.league_id %>/members/${userId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(`${username} has been removed from the league`, 'success');
            location.reload();
        } else {
            showToast(data.message || 'Failed to remove member', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error removing member', 'error');
    });
}

function showToast(message, type = 'info') {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; max-width: 300px;';
    toast.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-${type === 'error' ? 'exclamation-circle' : type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i>
            <div>${message}</div>
            <button type="button" class="btn-close ms-auto toast-close-btn"></button>
        </div>
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        if (toast.parentElement) {
            toast.remove();
        }
    }, 5000);
}

// Delete league confirmation
document.getElementById('confirmLeagueName').addEventListener('input', function() {
    const expectedName = '<%= league.league_name %>';
    const enteredName = this.value;
    const deleteBtn = document.getElementById('confirmDeleteBtn');
    
    if (enteredName === expectedName) {
        deleteBtn.disabled = false;
        deleteBtn.classList.remove('btn-secondary');
        deleteBtn.classList.add('btn-danger');
    } else {
        deleteBtn.disabled = true;
        deleteBtn.classList.add('btn-secondary');
        deleteBtn.classList.remove('btn-danger');
    }
});

function deleteLeague() {
    fetch('/leagues/<%= league.league_id %>', {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('League deleted successfully', 'success');
            setTimeout(() => {
                window.location.href = '/dashboard';
            }, 1500);
        } else {
            showToast(data.message || 'Failed to delete league', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error deleting league', 'error');
    });
}

// Global functions that need to be accessible from anywhere
function toggleMultiTierSettings() {
    const entryFeeSection = document.getElementById('entry-fee-section');
    const enableMultiTier = document.getElementById('enable_multi_tier');
    const multiTierSettings = document.getElementById('multi-tier-settings');
    const entryFee = document.getElementById('entry_fee');
    
    if (enableMultiTier && multiTierSettings) {
        if (enableMultiTier.checked) {
            multiTierSettings.style.display = 'block';
            // Hide the entry fee section when multi-tier is enabled
            if (entryFeeSection) {
                entryFeeSection.style.display = 'none';
            }
            // Only reset to default if no existing tier data
            const existingTierInputs = document.querySelectorAll('input[name="tier_name[]"]');
            const hasExistingData = Array.from(existingTierInputs).some(input => input.value.trim() !== '');
            if (!hasExistingData) {
                // Try to restore original server data first, fallback to defaults
                if (originalTierData.length > 0) {
                    restoreOriginalTierData();
                } else {
                    resetTiersToDefault();
                }
            }
        } else {
            multiTierSettings.style.display = 'none';
            // Show the entry fee section when multi-tier is disabled
            if (entryFeeSection) {
                entryFeeSection.style.display = 'block';
            }
        }
    }
}

// Reset tiers to default 2-tier setup
function resetTiersToDefault() {
    const tiersContainer = document.getElementById('tiers-container');
    const entryFee = document.getElementById('entry_fee');
    const baseFee = parseFloat(entryFee?.value || 0);
    
    if (tiersContainer) {
        // Reset tier counter
        tierCounter = 2;
        
        // Reset container with fresh 2 default tiers
        tiersContainer.innerHTML = `
            <div class="tier-row" data-tier="1">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" name="tier_name[]" value="" placeholder="e.g., Standard" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" name="tier_fee[]" value="${baseFee}" min="0" step="0.01" required>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Description <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" name="tier_description[]" value="" placeholder="Describe what this tier includes" required>
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier" disabled>
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="tier-row" data-tier="2">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" name="tier_name[]" value="" placeholder="e.g., Premium" required>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" name="tier_fee[]" value="${baseFee * 2}" min="0" step="0.01" required>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Description <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" name="tier_description[]" value="" placeholder="Describe what this tier includes" required>
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
}

// League Settings Dynamic Behavior
document.addEventListener('DOMContentLoaded', function() {
    // Join code copy buttons
    const copyJoinCodeBtn = document.getElementById('copyJoinCodeBtn');
    if (copyJoinCodeBtn) {
        copyJoinCodeBtn.addEventListener('click', () => copyJoinCode());
    }
    
    const regenerateJoinCodeBtn = document.getElementById('regenerateJoinCodeBtn');
    if (regenerateJoinCodeBtn) {
        regenerateJoinCodeBtn.addEventListener('click', regenerateJoinCode);
    }
    
    const regenerateJoinCodeModalBtn = document.getElementById('regenerateJoinCodeModalBtn');
    if (regenerateJoinCodeModalBtn) {
        regenerateJoinCodeModalBtn.addEventListener('click', regenerateJoinCode);
    }
    
    // Copy buttons for modal
    document.addEventListener('click', function(e) {
        if (e.target.closest('.copy-join-code-btn')) {
            const target = e.target.closest('.copy-join-code-btn').getAttribute('data-target');
            copyJoinCode(target);
        }
        
        if (e.target.closest('.edit-member-btn')) {
            const btn = e.target.closest('.edit-member-btn');
            openEditMemberModal(btn);
        }
        
        if (e.target.closest('.toast-close-btn')) {
            e.target.closest('.alert').remove();
        }
        
        if (e.target.closest('.delete-message-btn')) {
            const messageId = e.target.closest('.delete-message-btn').getAttribute('data-message-id');
            deleteMessage(messageId);
        }
    });
    
    // Delete button
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', deleteLeague);
    }
    const confidenceSettings = document.getElementById('confidence-settings');
    const currentPoolType = '<%= league.pool_type || "confidence" %>';
    const pointSystemSelect = document.getElementById('point_system');
    const multiplierSetting = document.getElementById('multiplier-setting');
    const pointMultiplierInput = document.getElementById('point_multiplier');
    const pointPreview = document.getElementById('point-preview');
    const deadlineTypeSelect = document.getElementById('deadline_type');
    const leagueDeadlineTime = document.getElementById('league_deadline_time');
    const enableMultiTier = document.getElementById('enable_multi_tier');
    const multiTierSettings = document.getElementById('multi-tier-settings');
    const tier1Fee = document.getElementById('tier1_fee');
    const entryFee = document.getElementById('entry_fee');
    
    // Show confidence settings if this is a confidence pool
    function toggleConfidenceSettings() {
        if (confidenceSettings) {
            if (currentPoolType === 'confidence') {
                confidenceSettings.style.display = 'block';
            } else {
                confidenceSettings.style.display = 'none';
            }
        }
    }
    
    // Toggle multiplier settings based on point system
    function toggleMultiplierSettings() {
        if (pointSystemSelect && multiplierSetting) {
            if (pointSystemSelect.value === 'multiplier') {
                multiplierSetting.style.display = 'flex';
                updatePointPreview();
            } else {
                multiplierSetting.style.display = 'none';
            }
        }
    }
    
    // Update point preview
    function updatePointPreview() {
        if (pointPreview && pointMultiplierInput && pointSystemSelect.value === 'multiplier') {
            const multiplier = parseFloat(pointMultiplierInput.value) || 2;
            pointPreview.textContent = `Confidence 1 = ${multiplier} pts, Confidence 2 = ${multiplier * 2} pts, Confidence 16 = ${multiplier * 16} pts`;
        }
    }
    
    // Toggle deadline time settings
    function toggleDeadlineSettings() {
        if (deadlineTypeSelect && leagueDeadlineTime) {
            if (deadlineTypeSelect.value === 'league_wide') {
                leagueDeadlineTime.style.display = 'block';
            } else {
                leagueDeadlineTime.style.display = 'none';
            }
        }
    }
    
    
    // Sync base entry fee with tier 1 fee
    function syncEntryFees() {
        if (enableMultiTier && enableMultiTier.checked && entryFee && tier1Fee) {
            tier1Fee.value = entryFee.value;
        }
    }
    
    // Add Tier button event listener
    const addTierBtn = document.getElementById('addTierBtn');
    if (addTierBtn) {
        addTierBtn.addEventListener('click', addTier);
    }
    
    // Save Settings button event listener
    const saveSettingsBtn = document.getElementById('saveSettingsBtn');
    if (saveSettingsBtn) {
        saveSettingsBtn.addEventListener('click', saveLeagueSettings);
    }
    
    // Settings toggle button event listener
    const settingsToggleBtn = document.getElementById('settingsToggleBtn');
    const settingsPanel = document.getElementById('leagueSettings');
    if (settingsToggleBtn && settingsPanel) {
        settingsToggleBtn.addEventListener('click', function() {
            const bsCollapse = new bootstrap.Collapse(settingsPanel, { toggle: false });
            
            // Check if panel is currently shown
            if (settingsPanel.classList.contains('show')) {
                // Panel is open, act like cancel button
                if (confirm('Discard all changes and close settings?')) {
                    resetSettingsForm();
                    bsCollapse.hide();
                }
            } else {
                // Panel is closed, open it
                bsCollapse.show();
                
                // Initialize tier data when settings are opened
                setTimeout(() => {
                    if (originalLeagueData.enable_multi_tier && originalTierData.length > 0) {
                        // Ensure tier data is properly displayed for multi-tier leagues
                        const existingTierInputs = document.querySelectorAll('input[name="tier_name[]"]');
                        const hasExistingData = Array.from(existingTierInputs).some(input => input.value.trim() !== '');
                        if (!hasExistingData) {
                            restoreOriginalTierData();
                        }
                    }
                    // Initialize payout calculations when settings are opened
                    initializePayoutCalculations();
                }, 200);
            }
        });
    }
    
    // Cancel button event listener - revert changes and collapse
    const cancelSettingsBtn = document.getElementById('cancelSettingsBtn');
    if (cancelSettingsBtn) {
        cancelSettingsBtn.addEventListener('click', function() {
            if (confirm('Discard all changes and close settings?')) {
                resetSettingsForm();
                // Collapse the settings panel
                const settingsPanel = document.getElementById('leagueSettings');
                const bsCollapse = new bootstrap.Collapse(settingsPanel, { hide: true });
            }
        });
    }
    
    // Event delegation for remove tier buttons
    document.addEventListener('click', function(e) {
        if (e.target.closest('.remove-tier-btn')) {
            const tierRow = e.target.closest('.tier-row');
            const tierNumber = tierRow.getAttribute('data-tier');
            
            // Don't allow removing tier 1
            if (tierNumber === '1') {
                showToast('Cannot remove the base tier', 'error');
                return;
            }
            
            // Confirm removal
            if (confirm('Remove this tier? This will affect any members currently in this tier.')) {
                tierRow.remove();
            }
        }
    });
    
    // Add event listeners for payout calculation elements
    const payoutCalculationsEnabled = document.getElementById('payout_calculations_enabled');
    if (payoutCalculationsEnabled) {
        payoutCalculationsEnabled.addEventListener('change', togglePayoutCalculations);
    }
    
    const expenseAmount = document.getElementById('expense_amount');
    if (expenseAmount) {
        expenseAmount.addEventListener('input', updatePayoutCalculations);
    }
    
    const weeklyPoolEnabled = document.getElementById('weekly_pool_enabled');
    if (weeklyPoolEnabled) {
        weeklyPoolEnabled.addEventListener('change', toggleWeeklyPool);
    }
    
    const weeklyPoolType = document.getElementById('weekly_pool_type');
    if (weeklyPoolType) {
        weeklyPoolType.addEventListener('change', toggleWeeklyPoolType);
    }
    
    const weeklyPoolPercentage = document.getElementById('weekly_pool_percentage');
    if (weeklyPoolPercentage) {
        weeklyPoolPercentage.addEventListener('input', updatePayoutCalculations);
    }
    
    const seasonPoolEnabled = document.getElementById('season_pool_enabled');
    if (seasonPoolEnabled) {
        seasonPoolEnabled.addEventListener('change', toggleSeasonPool);
    }
    
    const seasonPoolType = document.getElementById('season_pool_type');
    if (seasonPoolType) {
        seasonPoolType.addEventListener('change', toggleSeasonPoolType);
    }
    
    const seasonPoolPercentage = document.getElementById('season_pool_percentage');
    if (seasonPoolPercentage) {
        seasonPoolPercentage.addEventListener('input', updatePayoutCalculations);
    }
    
    // Event delegation for dynamically created position inputs
    document.addEventListener('input', function(e) {
        if (e.target.classList.contains('weekly-position-input')) {
            const position = parseInt(e.target.getAttribute('data-position'));
            const value = e.target.value;
            updateWeeklyPositionValue(position, value);
        }
        if (e.target.classList.contains('season-position-input')) {
            const position = parseInt(e.target.getAttribute('data-position'));
            const value = e.target.value;
            updateSeasonPositionValue(position, value);
        }
    });
    
    // Handle unlimited participants checkbox
    const unlimitedParticipants = document.getElementById('unlimited_participants');
    const maxParticipantsInput = document.getElementById('max_participants');
    if (unlimitedParticipants && maxParticipantsInput) {
        unlimitedParticipants.addEventListener('change', function() {
            if (this.checked) {
                maxParticipantsInput.disabled = true;
                maxParticipantsInput.value = 999; // Set to unlimited value for form submission
            } else {
                maxParticipantsInput.disabled = false;
                maxParticipantsInput.value = 50; // Default reasonable value
                maxParticipantsInput.focus();
            }
        });
    }
    
    // Set up event listeners
    toggleConfidenceSettings(); // Initial check based on current pool type
    
    if (pointSystemSelect) {
        pointSystemSelect.addEventListener('change', toggleMultiplierSettings);
        toggleMultiplierSettings(); // Initial check
    }
    
    if (pointMultiplierInput) {
        pointMultiplierInput.addEventListener('input', updatePointPreview);
    }
    
    if (deadlineTypeSelect) {
        deadlineTypeSelect.addEventListener('change', toggleDeadlineSettings);
        toggleDeadlineSettings(); // Initial check
    }
    
    if (enableMultiTier) {
        enableMultiTier.addEventListener('change', toggleMultiTierSettings);
        toggleMultiTierSettings(); // Initial check
    }
    
    if (entryFee) {
        entryFee.addEventListener('input', syncEntryFees);
    }
    
    // Tiebreaker validation - prevent duplicate selections
    const primaryTiebreakerField = document.getElementById('primary_tiebreaker');
    const secondaryTiebreakerField = document.getElementById('secondary_tiebreaker');
    
    function updateTiebreakerOptions() {
        if (!primaryTiebreakerField || !secondaryTiebreakerField) return;
        
        const primaryValue = primaryTiebreakerField.value;
        const secondaryValue = secondaryTiebreakerField.value;
        
        // Enable all secondary options first
        Array.from(secondaryTiebreakerField.options).forEach(option => {
            option.disabled = false;
        });
        
        // Disable the primary selection in secondary dropdown
        if (primaryValue) {
            const optionToDisable = secondaryTiebreakerField.querySelector(`option[value="${primaryValue}"]`);
            if (optionToDisable) {
                optionToDisable.disabled = true;
                // If secondary was set to same as primary, reset it
                if (secondaryValue === primaryValue) {
                    secondaryTiebreakerField.value = '';
                }
            }
        }
    }
    
    if (primaryTiebreakerField) {
        primaryTiebreakerField.addEventListener('change', updateTiebreakerOptions);
        updateTiebreakerOptions(); // Initial check
    }
});

// Payment management functions
function markAsPaid(userId) {
    const newStatus = prompt('Enter payment amount (leave blank to mark as unpaid):');
    
    if (newStatus === null) return; // Cancelled
    
    const paymentData = {
        user_id: userId,
        payment_status: newStatus.trim() === '' ? 'unpaid' : 'paid',
        amount_paid: newStatus.trim() === '' ? 0 : parseFloat(newStatus) || 0
    };
    
    fetch('/leagues/<%= league.league_id %>/payments', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(paymentData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Payment status updated successfully', 'success');
            location.reload();
        } else {
            showToast(data.message || 'Failed to update payment status', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error updating payment status', 'error');
    });
}

// Dynamic tier management
let tierCounter = 2; // Start at 2 since we have two default tiers

// Store original tier data for reset functionality
const originalTierData = [
<% if (locals.tiers && tiers.length > 0) { %>
    <% tiers.forEach((tier, index) => { %>
    {
        tier_name: '<%= tier.tier_name %>',
        entry_fee: '<%= tier.entry_fee %>',
        tier_description: '<%= tier.tier_description %>'
    }<%= index < tiers.length - 1 ? ',' : '' %>
    <% }); %>
<% } %>
];

// Store original league settings for complete restoration
const originalLeagueData = {
    league_name: '<%= league.league_name %>',
    description: '<%= league.description || '' %>',
    privacy: '<%= league.privacy || 'private' %>',
    max_participants: <%= league.max_participants || 999 %>,
    max_entries: '<%= league.max_entries || 999 %>',
    entry_fee: '<%= league.entry_fee %>',
    enable_multi_tier: <%= league.enable_multi_tier ? 'true' : 'false' %>,
    unlimited_participants: <%= (!league.max_participants || league.max_participants >= 999) ? 'true' : 'false' %>,
    
    // Tiebreaker settings
    primary_tiebreaker: '<%= (league.settings && league.settings.primary_tiebreaker) || 'mnf_total' %>',
    secondary_tiebreaker: '<%= (league.settings && league.settings.secondary_tiebreaker) || 'highest_confidence_correct' %>'
};

// Store original payout settings if they exist
const originalPayoutData = {
    payout_calculations_enabled: false, // Default to disabled
    expense_amount: 0,
    expense_description: '',
    manual_payout_message: '',
    weekly_pool_enabled: false,
    weekly_positions: 3,
    weekly_pool_type: 'percentage',
    weekly_pool_percentage: 70,
    season_pool_enabled: false,
    season_positions: 3,
    season_pool_type: 'percentage',
    season_pool_percentage: 30
};

// Restore original tier data from server
function restoreOriginalTierData() {
    const tiersContainer = document.getElementById('tiers-container');
    if (!tiersContainer) return;
    
    if (originalTierData.length > 0) {
        // Restore existing server tiers
        tierCounter = originalTierData.length;
        let tierHtml = '';
        
        originalTierData.forEach((tier, index) => {
            const tierNumber = index + 1;
            const isFirstTier = index === 0;
            tierHtml += `
                <div class="tier-row" data-tier="${tierNumber}">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" name="tier_name[]" value="${tier.tier_name}" placeholder="e.g., Standard" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" name="tier_fee[]" value="${tier.entry_fee}" min="0" step="0.01" required>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Description <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" name="tier_description[]" value="${tier.tier_description}" placeholder="Describe what this tier includes" required>
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier" ${isFirstTier ? 'disabled' : ''}>
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
        });
        
        tiersContainer.innerHTML = tierHtml;
    } else {
        // No existing tiers, use defaults
        resetTiersToDefault();
    }
}

function addTier() {
    tierCounter++;
    const tiersContainer = document.getElementById('tiers-container');
    
    const tierRow = document.createElement('div');
    tierRow.className = 'tier-row';
    tierRow.setAttribute('data-tier', tierCounter);
    tierRow.innerHTML = `
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Tier Name <span class="text-danger">*</span></label>
                <input type="text" class="form-control" name="tier_name[]" value="" placeholder="e.g., Premium, Elite, VIP" required>
            </div>
            <div class="col-md-3">
                <label class="form-label">Entry Fee ($) <span class="text-danger">*</span></label>
                <input type="number" class="form-control" name="tier_fee[]" value="0" min="0" step="0.01" required>
            </div>
            <div class="col-md-4">
                <label class="form-label">Description <span class="text-danger">*</span></label>
                <input type="text" class="form-control" name="tier_description[]" value="" placeholder="Describe what this tier includes" required>
            </div>
            <div class="col-md-1">
                <label class="form-label">&nbsp;</label>
                <button type="button" class="btn btn-sm btn-outline-danger d-block remove-tier-btn" title="Remove tier">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    `;
    
    tiersContainer.appendChild(tierRow);
}


// Change user's tier level
function changeTier(userId) {
    // TODO: Get available tiers from database
    const availableTiers = [
        { id: 1, name: 'Standard', fee: 50 },
        { id: 2, name: 'Premium', fee: 100 },
        { id: 3, name: 'Elite', fee: 150 }
    ];
    
    let tierOptions = availableTiers.map(tier => 
        `<option value="${tier.id}">${tier.name} - $${tier.fee}</option>`
    ).join('');
    
    const newTier = prompt(`Select new tier:\n${availableTiers.map(t => `${t.id}: ${t.name} ($${t.fee})`).join('\n')}\n\nEnter tier number:`);
    
    if (!newTier) return;
    
    const tierData = {
        user_id: userId,
        new_tier_id: parseInt(newTier),
        reason: 'Changed by commissioner'
    };
    
    fetch('/leagues/<%= league.league_id %>/change-tier', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(tierData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Tier changed successfully', 'success');
            location.reload();
        } else {
            showToast(data.message || 'Failed to change tier', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error changing tier', 'error');
    });
}

// Edit Member Modal Functions
let currentEditingUserId = null;

function openEditMemberModal(button) {
    currentEditingUserId = parseInt(button.getAttribute('data-user-id'));
    
    // Populate modal with member data
    document.getElementById('editMemberName').textContent = button.getAttribute('data-username');
    document.getElementById('editUsername').value = button.getAttribute('data-username');
    document.getElementById('editFirstName').value = button.getAttribute('data-first-name') || '';
    document.getElementById('editLastName').value = button.getAttribute('data-last-name') || '';
    document.getElementById('editEmail').value = button.getAttribute('data-email');
    document.getElementById('editPassword').value = ''; // Clear password field
    
    // Set role display and icon
    const role = button.getAttribute('data-role');
    const roleDisplay = document.getElementById('editRoleDisplay');
    const roleIcon = document.getElementById('editRoleIcon');
    
    if (role === 'co_commissioner') {
        roleDisplay.value = 'Co-Commissioner';
        roleIcon.textContent = '👑';
    } else {
        roleDisplay.value = 'Participant';
        roleIcon.textContent = '👤';
    }
    
    document.getElementById('editAmountPaid').value = parseFloat(button.getAttribute('data-amount-paid') || 0);
    
    // Update Make Commissioner button text and action based on current role
    const makeCommissionerBtn = document.getElementById('makeCommissionerBtn');
    const isMainCommissioner = currentEditingUserId === <%= league.commissioner_id %>;
    
    if (isMainCommissioner) {
        // Hide role changes for main commissioner
        makeCommissionerBtn.style.display = 'none';
    } else {
        makeCommissionerBtn.style.display = 'block';
        if (role === 'co_commissioner') {
            makeCommissionerBtn.innerHTML = '<i class="fas fa-user me-2"></i>Remove Co-Commissioner';
            makeCommissionerBtn.className = 'btn btn-secondary w-100';
        } else {
            makeCommissionerBtn.innerHTML = '<i class="fas fa-crown me-2"></i>Make Co-Commissioner';
            makeCommissionerBtn.className = 'btn btn-warning w-100';
        }
    }
    
    // Set entry count display (default to 1 if not specified)
    const entryCount = button.getAttribute('data-entry-count') || '1';
    document.getElementById('editEntryCountDisplay').textContent = entryCount;
    document.getElementById('editEntryCount').value = parseInt(entryCount);
    
    // Set tier if multi-tier is enabled
    const editTier = document.getElementById('editTier');
    if (editTier && '<%= league.enable_multi_tier %>') {
        // Populate tier options from server data
        editTier.innerHTML = '';
        <% if (locals.tiers && tiers.length > 0) { %>
            <% tiers.forEach((tier, index) => { %>
                const tierOption<%= index %> = document.createElement('option');
                tierOption<%= index %>.value = '<%= tier.tier_id %>';
                tierOption<%= index %>.textContent = '<%= tier.tier_name %> ($<%= tier.entry_fee %>)';
                editTier.appendChild(tierOption<%= index %>);
            <% }) %>
        <% } %>
        
        // Set selected tier
        const memberTierId = button.getAttribute('data-tier-id');
        if (memberTierId) {
            editTier.value = memberTierId;
        }
    }
    
    // Calculate and update payment information
    updatePaymentCalculations();
    
    // Add event listeners for dynamic calculations
    setupPaymentCalculationListeners();
    
    // Show the modal
    new bootstrap.Modal(document.getElementById('editMemberModal')).show();
}

// Setup event listeners for dynamic payment calculations
function setupPaymentCalculationListeners() {
    const entryCountInput = document.getElementById('editEntryCount');
    const amountPaidInput = document.getElementById('editAmountPaid');
    const tierSelect = document.getElementById('editTier');
    
    // Remove existing listeners to avoid duplicates
    entryCountInput.removeEventListener('input', updatePaymentCalculations);
    amountPaidInput.removeEventListener('input', updatePaymentCalculations);
    if (tierSelect) tierSelect.removeEventListener('change', updatePaymentCalculations);
    
    // Add listeners
    entryCountInput.addEventListener('input', updatePaymentCalculations);
    amountPaidInput.addEventListener('input', updatePaymentCalculations);
    if (tierSelect) tierSelect.addEventListener('change', updatePaymentCalculations);
}

// Calculate payment amounts and status dynamically
function updatePaymentCalculations() {
    const baseEntryFee = parseFloat('<%= league.entry_fee || 0 %>');
    const entryCount = parseInt(document.getElementById('editEntryCount').value) || 1;
    const amountPaid = parseFloat(document.getElementById('editAmountPaid').value) || 0;
    
    // Get tier entry fee (default to base entry fee)
    let entryFee = baseEntryFee;
    const tierSelect = document.getElementById('editTier');
    if (tierSelect && tierSelect.value && '<%= league.enable_multi_tier %>') {
        // Extract entry fee from tier option text (format: "Tier Name ($XX.XX)")
        const tierText = tierSelect.options[tierSelect.selectedIndex]?.text;
        if (tierText) {
            const feeMatch = tierText.match(/\$(\d+\.?\d*)/);
            if (feeMatch) {
                entryFee = parseFloat(feeMatch[1]);
            }
        }
    }
    
    // Calculate amount owed
    const amountOwed = entryFee * entryCount;
    document.getElementById('editAmountOwed').value = amountOwed.toFixed(2);
    
    // Determine payment status and icon
    let paymentStatus, statusIcon, statusClass;
    const tolerance = 0.01; // Small tolerance for floating point comparison
    
    if (amountOwed === 0) {
        paymentStatus = 'Free';
        statusIcon = '🎉';
        statusClass = 'success';
    } else if (Math.abs(amountPaid - amountOwed) < tolerance) {
        paymentStatus = 'Paid';
        statusIcon = '✅';
        statusClass = 'success';
    } else if (amountPaid > amountOwed + tolerance) {
        paymentStatus = 'Overpaid';
        statusIcon = '💰';
        statusClass = 'info';
    } else if (amountPaid > tolerance) {
        paymentStatus = 'Partial Payment';
        statusIcon = '⚠️';
        statusClass = 'warning';
    } else {
        paymentStatus = 'Unpaid';
        statusIcon = '❌';
        statusClass = 'danger';
    }
    
    // Update payment status display
    document.getElementById('editPaymentStatus').value = paymentStatus;
    document.getElementById('editPaymentStatus').className = `form-control text-${statusClass}`;
    document.getElementById('paymentStatusIcon').textContent = statusIcon;
}

// Save member changes
document.getElementById('saveMemberChangesBtn').addEventListener('click', function() {
    const data = {
        user_id: currentEditingUserId,
        username: document.getElementById('editUsername').value,
        first_name: document.getElementById('editFirstName').value,
        last_name: document.getElementById('editLastName').value,
        email: document.getElementById('editEmail').value,
        payment_status: document.getElementById('editPaymentStatus').value,
        amount_paid: parseFloat(document.getElementById('editAmountPaid').value) || 0,
        payment_method: document.getElementById('editPaymentMethod').value
    };
    
    // Include password if provided
    const newPassword = document.getElementById('editPassword').value;
    if (newPassword && newPassword.trim()) {
        data.new_password = newPassword.trim();
    }
    
    // Add tier if multi-tier is enabled
    const editTier = document.getElementById('editTier');
    if (editTier) {
        data.tier = editTier.value;
    }
    
    fetch(`/leagues/<%= league.league_id %>/update-member`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Member updated successfully', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast(data.message || 'Failed to update member', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error updating member', 'error');
    });
});

// Make Co-Commissioner / Make Participant toggle
document.getElementById('makeCommissionerBtn').addEventListener('click', function() {
    const username = document.getElementById('editUsername').value;
    const currentRole = document.getElementById('editRoleDisplay').value;
    
    let newRole, actionText, confirmText;
    if (currentRole === 'Co-Commissioner') {
        newRole = 'participant';
        actionText = 'demote to participant';
        confirmText = `Are you sure you want to demote ${username} from co-commissioner to participant?`;
    } else {
        newRole = 'co_commissioner';
        actionText = 'promote to co-commissioner';
        confirmText = `Are you sure you want to make ${username} a co-commissioner? They will be able to manage league settings and members, but you will remain the main commissioner.`;
    }
    
    if (!confirm(confirmText)) {
        return;
    }
    
    fetch(`/leagues/<%= league.league_id %>/update-member`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            user_id: currentEditingUserId,
            role: newRole
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(`Successfully ${actionText}`, 'success');
            
            // Update the modal display
            const roleDisplay = document.getElementById('editRoleDisplay');
            const roleIcon = document.getElementById('editRoleIcon');
            const makeCommissionerBtn = document.getElementById('makeCommissionerBtn');
            
            if (newRole === 'co_commissioner') {
                roleDisplay.value = 'Co-Commissioner';
                roleIcon.textContent = '👑';
                makeCommissionerBtn.innerHTML = '<i class="fas fa-user me-2"></i>Remove Co-Commissioner';
                makeCommissionerBtn.className = 'btn btn-secondary w-100';
            } else {
                roleDisplay.value = 'Participant';
                roleIcon.textContent = '👤';
                makeCommissionerBtn.innerHTML = '<i class="fas fa-crown me-2"></i>Make Co-Commissioner';
                makeCommissionerBtn.className = 'btn btn-warning w-100';
            }
            
            // Refresh the members list in the background
            setTimeout(() => location.reload(), 1500);
        } else {
            showToast(data.message || `Failed to ${actionText}`, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast(`Error ${actionText}`, 'error');
    });
});


// Remove Member
document.getElementById('removeMemberBtn').addEventListener('click', function() {
    const username = document.getElementById('editUsername').value;
    
    if (!confirm(`Are you sure you want to remove ${username} from this league? This action cannot be undone.`)) {
        return;
    }
    
    fetch(`/leagues/<%= league.league_id %>/members/${currentEditingUserId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Member removed successfully', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast(data.message || 'Failed to remove member', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error removing member', 'error');
    });
});

// Save League Settings
function saveLeagueSettings() {
    const leagueData = {
        league_name: document.getElementById('league_name')?.value,
        description: document.getElementById('description')?.value,
        privacy: document.getElementById('privacy')?.value,
        max_participants: document.getElementById('unlimited_participants')?.checked ? 999 : parseInt(document.getElementById('max_participants')?.value),
        max_entries: parseInt(document.getElementById('max_entries')?.value),
        entry_fee: parseFloat(document.getElementById('entry_fee')?.value) || 0,
        enable_multi_tier: document.getElementById('enable_multi_tier')?.checked || false,
        
        // Deadline settings
        deadline_type: document.getElementById('deadline_type')?.value,
        weekly_deadline: document.getElementById('weekly_deadline')?.value,
        
        // Tiebreaker settings
        primary_tiebreaker: document.getElementById('primary_tiebreaker')?.value,
        secondary_tiebreaker: document.getElementById('secondary_tiebreaker')?.value,
        
        // Include payout calculation settings
        payout_calculations_enabled: document.getElementById('payout_calculations_enabled')?.checked || false,
        expense_amount: parseFloat(document.getElementById('expense_amount')?.value) || 0,
        expense_description: document.getElementById('expense_description')?.value || '',
        manual_payout_message: document.getElementById('manual_payout_message')?.value || '',
        weekly_pool_enabled: document.getElementById('weekly_pool_enabled')?.checked || false,
        weekly_positions: parseInt(document.getElementById('weekly_positions')?.value) || 3,
        weekly_pool_type: document.getElementById('weekly_pool_type')?.value || 'percentage',
        weekly_pool_percentage: parseFloat(document.getElementById('weekly_pool_percentage')?.value) || 70,
        season_pool_enabled: document.getElementById('season_pool_enabled')?.checked || false,
        season_positions: parseInt(document.getElementById('season_positions')?.value) || 3,
        season_pool_type: document.getElementById('season_pool_type')?.value || 'percentage',
        season_pool_percentage: parseFloat(document.getElementById('season_pool_percentage')?.value) || 30
    };

    // If multi-tier is enabled, collect tier data
    if (leagueData.enable_multi_tier) {
        const tiers = [];
        const tierRows = document.querySelectorAll('.tier-row');
        
        tierRows.forEach((row, index) => {
            const name = row.querySelector('input[name="tier_name[]"]')?.value;
            const fee = parseFloat(row.querySelector('input[name="tier_fee[]"]')?.value) || 0;
            const description = row.querySelector('input[name="tier_description[]"]')?.value;
            
            if (name && name.trim()) {
                tiers.push({
                    tier_order: index + 1,
                    tier_name: name.trim(),
                    entry_fee: fee,
                    tier_description: description || ''
                });
            }
        });
        
        if (tiers.length === 0) {
            showToast('Please add at least one tier when multi-tier is enabled', 'error');
            return;
        }
        
        leagueData.tiers = tiers;
    }

    fetch(`/leagues/<%= league.league_id %>/settings`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(leagueData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('League settings saved successfully!', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast(data.message || 'Failed to save league settings', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error saving league settings', 'error');
    });
}

// Reset settings form to original values
function resetSettingsForm() {
    // Reset all basic league fields to their original values
    document.getElementById('league_name').value = originalLeagueData.league_name;
    document.getElementById('description').value = originalLeagueData.description;
    document.getElementById('privacy').value = originalLeagueData.privacy;
    
    // Handle max participants and unlimited checkbox
    const unlimitedCheckbox = document.getElementById('unlimited_participants');
    const maxParticipantsInput = document.getElementById('max_participants');
    if (originalLeagueData.unlimited_participants) {
        unlimitedCheckbox.checked = true;
        maxParticipantsInput.disabled = true;
        maxParticipantsInput.value = 999;
    } else {
        unlimitedCheckbox.checked = false;
        maxParticipantsInput.disabled = false;
        maxParticipantsInput.value = originalLeagueData.max_participants;
    }
    
    document.getElementById('max_entries').value = originalLeagueData.max_entries;
    document.getElementById('entry_fee').value = originalLeagueData.entry_fee;
    document.getElementById('enable_multi_tier').checked = originalLeagueData.enable_multi_tier;
    
    // Reset tiebreaker settings to original values
    document.getElementById('primary_tiebreaker').value = originalLeagueData.primary_tiebreaker;
    document.getElementById('secondary_tiebreaker').value = originalLeagueData.secondary_tiebreaker;
    
    // Reset payout calculation settings to original values
    document.getElementById('payout_calculations_enabled').checked = originalPayoutData.payout_calculations_enabled;
    document.getElementById('expense_amount').value = originalPayoutData.expense_amount;
    document.getElementById('expense_description').value = originalPayoutData.expense_description;
    document.getElementById('manual_payout_message').value = originalPayoutData.manual_payout_message;
    document.getElementById('weekly_pool_enabled').checked = originalPayoutData.weekly_pool_enabled;
    document.getElementById('weekly_positions').value = originalPayoutData.weekly_positions;
    document.getElementById('weekly_pool_type').value = originalPayoutData.weekly_pool_type;
    document.getElementById('weekly_pool_percentage').value = originalPayoutData.weekly_pool_percentage;
    document.getElementById('season_pool_enabled').checked = originalPayoutData.season_pool_enabled;
    document.getElementById('season_positions').value = originalPayoutData.season_positions;
    document.getElementById('season_pool_type').value = originalPayoutData.season_pool_type;
    document.getElementById('season_pool_percentage').value = originalPayoutData.season_pool_percentage;
    
    // Reset display toggles
    toggleMultiTierSettings();
    togglePayoutCalculations();
    toggleWeeklyPool();
    toggleSeasonPool();
    toggleWeeklyPoolType();
    toggleSeasonPoolType();
    
    // Restore original tier data from server
    if (originalLeagueData.enable_multi_tier) {
        restoreOriginalTierData();
    }
}

// Commissioner Message Functions
let commissionerMessages = []; // Store messages locally

document.getElementById('postMessageBtn').addEventListener('click', function() {
    const title = document.getElementById('messageTitle').value.trim();
    const content = document.getElementById('messageContent').value.trim();
    const important = document.getElementById('messageImportant').checked;
    
    if (!title || !content) {
        showToast('Please enter both title and message content', 'error');
        return;
    }
    
    const messageData = {
        title,
        content,
        important
    };
    
    fetch(`/leagues/<%= league.league_id %>/post-message`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(messageData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Message posted successfully!', 'success');
            
            // Clear the form
            document.getElementById('messageTitle').value = '';
            document.getElementById('messageContent').value = '';
            document.getElementById('messageImportant').checked = false;
            
            // Close the modal
            bootstrap.Modal.getInstance(document.getElementById('postMessageModal')).hide();
            
            // Reload messages from database to get the actual saved message
            loadCommissionerMessages();
        } else {
            showToast(data.message || 'Failed to post message', 'error');
        }
    })
    .catch(error => {
        showToast('Error posting message', 'error');
    });
});

// Load commissioner messages
function loadCommissionerMessages() {
    fetch(`/leagues/<%= league.league_id %>/messages`)
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            commissionerMessages = data.messages || [];
            displayCommissionerMessages();
        }
    })
    .catch(error => {
        displayCommissionerMessages(); // Show empty state if error
    });
}

// Display commissioner messages
function displayCommissionerMessages() {
    const messagesContainer = document.getElementById('commissionerMessages');
    const isCommissioner = <%= isCommissioner ? 'true' : 'false' %>;
    
    if (commissionerMessages.length > 0) {
        messagesContainer.innerHTML = commissionerMessages.map(message => `
            <div class="border-bottom pb-2 mb-2 ${message.important ? 'border-warning-subtle bg-warning-subtle' : ''}" data-message-id="${message.message_id}">
                <div class="d-flex justify-content-between align-items-start mb-1">
                    <div class="flex-grow-1">
                        <strong class="text-dark">${message.important ? '⚠️ ' : ''}${message.title}</strong>
                        ${isCommissioner ? `<button type="button" class="btn btn-sm btn-outline-danger ms-2 delete-message-btn" data-message-id="${message.message_id}" title="Delete message"><i class="fas fa-trash"></i></button>` : ''}
                    </div>
                    <small class="text-muted">${new Date(message.created_at).toLocaleDateString()}</small>
                </div>
                <div class="text-dark mb-1">${message.content}</div>
                <div class="small text-muted">
                    <i class="fas fa-crown me-1"></i>Posted by ${message.posted_by || '<%= league.commissioner_name %>'}
                </div>
            </div>
        `).join('');
    } else {
        messagesContainer.innerHTML = `
            <div class="text-muted text-center py-3">
                <i class="fas fa-message me-2"></i>
                No messages posted yet
            </div>
        `;
    }
}

// Delete message function
function deleteMessage(messageId) {
    if (!confirm('Are you sure you want to delete this message?')) {
        return;
    }
    
    fetch(`/leagues/<%= league.league_id %>/messages/${messageId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Message deleted successfully', 'success');
            
            // Reload messages from database to reflect the deletion
            loadCommissionerMessages();
        } else {
            showToast(data.message || 'Failed to delete message', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error deleting message', 'error');
    });
}

// Load messages when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadCommissionerMessages();
    
    // Initialize payout calculations only if elements are visible
    setTimeout(initializePayoutCalculations, 100); // Small delay to ensure DOM is ready
});

// ===============================
// PAYOUT CALCULATION FUNCTIONS
// ===============================

let currentPayoutData = {
    totalPurse: 0,
    expenseAmount: 0,
    netPurse: 0,
    weeklyPool: 0,
    seasonPool: 0,
    unallocated: 0
};

// Initialize payout calculations
function initializePayoutCalculations() {
    // Only initialize if payout elements exist (they might be in collapsed settings)
    const totalPurseElement = document.getElementById('totalPurse');
    if (!totalPurseElement) {
        console.log('Payout elements not found, skipping initialization');
        return;
    }
    
    loadPayoutData();
    updatePayoutCalculations();
    updateWeeklyPositions();
    updateSeasonPositions();
}

// Load existing payout data from server
function loadPayoutData() {
    fetch(`/leagues/<%= league.league_id %>/payouts`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const payouts = data.payouts;
                const config = payouts.config;
                
                // Update original payout data for reset functionality
                originalPayoutData.payout_calculations_enabled = config.payout_calculations_enabled !== 0;
                originalPayoutData.expense_amount = config.expense_amount || 0;
                originalPayoutData.expense_description = config.expense_description || '';
                originalPayoutData.manual_payout_message = config.manual_payout_message || '';
                originalPayoutData.weekly_pool_enabled = config.weekly_payout_enabled !== 0;
                originalPayoutData.weekly_positions = config.weekly_positions || 3;
                originalPayoutData.weekly_pool_type = config.weekly_allocation_type || 'percentage';
                originalPayoutData.weekly_pool_percentage = config.weekly_total_percentage || 70;
                originalPayoutData.season_pool_enabled = config.season_payout_enabled !== 0;
                originalPayoutData.season_positions = config.season_positions || 3;
                originalPayoutData.season_pool_type = config.season_allocation_type || 'percentage';
                originalPayoutData.season_pool_percentage = config.season_total_percentage || 30;
                
                // Update UI with loaded data
                document.getElementById('payout_calculations_enabled').checked = originalPayoutData.payout_calculations_enabled;
                document.getElementById('expense_amount').value = originalPayoutData.expense_amount;
                document.getElementById('expense_description').value = originalPayoutData.expense_description;
                document.getElementById('manual_payout_message').value = originalPayoutData.manual_payout_message;
                
                document.getElementById('weekly_pool_enabled').checked = originalPayoutData.weekly_pool_enabled;
                document.getElementById('weekly_positions').value = originalPayoutData.weekly_positions;
                document.getElementById('weekly_pool_type').value = originalPayoutData.weekly_pool_type;
                document.getElementById('weekly_pool_percentage').value = originalPayoutData.weekly_pool_percentage;
                
                document.getElementById('season_pool_enabled').checked = originalPayoutData.season_pool_enabled;
                document.getElementById('season_positions').value = originalPayoutData.season_positions;
                document.getElementById('season_pool_type').value = originalPayoutData.season_pool_type;
                document.getElementById('season_pool_percentage').value = originalPayoutData.season_pool_percentage;
                
                // Update purse display
                updatePurseDisplay(payouts);
                
                // Toggle UI based on mode
                togglePayoutCalculations();
                toggleWeeklyPoolType();
                toggleSeasonPoolType();
            }
        })
        .catch(error => {
            console.error('Error loading payout data:', error);
        });
}

// Toggle between automatic and manual payout mode
function togglePayoutCalculations() {
    const enabled = document.getElementById('payout_calculations_enabled').checked;
    const automaticMode = document.getElementById('automaticPayoutMode');
    const manualMode = document.getElementById('manualPayoutMode');
    
    if (enabled) {
        automaticMode.style.display = 'block';
        manualMode.style.display = 'none';
    } else {
        automaticMode.style.display = 'none';
        manualMode.style.display = 'block';
    }
    
    updatePayoutCalculations();
}

// Toggle weekly pool settings
function toggleWeeklyPool() {
    const enabled = document.getElementById('weekly_pool_enabled').checked;
    const settings = document.getElementById('weeklyPoolSettings');
    settings.style.display = enabled ? 'block' : 'none';
    updatePayoutCalculations();
}

// Toggle season pool settings
function toggleSeasonPool() {
    const enabled = document.getElementById('season_pool_enabled').checked;
    const settings = document.getElementById('seasonPoolSettings');
    settings.style.display = enabled ? 'block' : 'none';
    updatePayoutCalculations();
}

// Toggle weekly pool type (percentage vs fixed)
function toggleWeeklyPoolType() {
    const type = document.getElementById('weekly_pool_type').value;
    const input = document.getElementById('weekly_pool_percentage');
    const suffix = document.getElementById('weekly_pool_suffix');
    
    if (type === 'percentage') {
        input.placeholder = '70';
        input.max = '100';
        suffix.textContent = '%';
    } else {
        input.placeholder = '0.00';
        input.max = '';
        suffix.textContent = '$';
    }
    updatePayoutCalculations();
}

// Toggle season pool type (percentage vs fixed)
function toggleSeasonPoolType() {
    const type = document.getElementById('season_pool_type').value;
    const input = document.getElementById('season_pool_percentage');
    const suffix = document.getElementById('season_pool_suffix');
    
    if (type === 'percentage') {
        input.placeholder = '30';
        input.max = '100';
        suffix.textContent = '%';
    } else {
        input.placeholder = '0.00';
        input.max = '';
        suffix.textContent = '$';
    }
    updatePayoutCalculations();
}

// Update payout calculations
function updatePayoutCalculations() {
    // Check if elements exist first
    const totalPurseElement = document.getElementById('totalPurse');
    const expenseAmountElement = document.getElementById('expense_amount');
    
    if (!totalPurseElement || !expenseAmountElement) {
        console.log('Payout elements not ready for calculations');
        return;
    }
    
    // Get basic values
    const totalPurse = parseFloat(totalPurseElement.textContent.replace('$', '')) || 0;
    const expenseAmount = parseFloat(expenseAmountElement.value) || 0;
    const netPurse = Math.max(0, totalPurse - expenseAmount);
    
    // Calculate pools
    let weeklyPool = 0;
    let seasonPool = 0;
    
    if (document.getElementById('weekly_pool_enabled').checked) {
        const weeklyType = document.getElementById('weekly_pool_type').value;
        const weeklyValue = parseFloat(document.getElementById('weekly_pool_percentage').value) || 0;
        
        if (weeklyType === 'percentage') {
            weeklyPool = (netPurse * weeklyValue) / 100;
        } else {
            weeklyPool = weeklyValue;
        }
    }
    
    if (document.getElementById('season_pool_enabled').checked) {
        const seasonType = document.getElementById('season_pool_type').value;
        const seasonValue = parseFloat(document.getElementById('season_pool_percentage').value) || 0;
        
        if (seasonType === 'percentage') {
            seasonPool = (netPurse * seasonValue) / 100;
        } else {
            seasonPool = seasonValue;
        }
    }
    
    const unallocated = Math.max(0, netPurse - weeklyPool - seasonPool);
    
    // Update current data
    currentPayoutData = {
        totalPurse,
        expenseAmount,
        netPurse,
        weeklyPool,
        seasonPool,
        unallocated
    };
    
    // Update display (with null checks)
    const expenseDisplayElement = document.getElementById('expenseAmount');
    const netPurseElement = document.getElementById('netPurse');
    const weeklyPoolTotalElement = document.getElementById('weeklyPoolTotal');
    const weeklyPoolPerWeekElement = document.getElementById('weeklyPoolPerWeek');
    const seasonPoolTotalElement = document.getElementById('seasonPoolTotal');
    const unallocatedAmountElement = document.getElementById('unallocatedAmount');
    
    if (expenseDisplayElement) expenseDisplayElement.textContent = expenseAmount.toFixed(2);
    if (netPurseElement) netPurseElement.textContent = netPurse.toFixed(2);
    if (weeklyPoolTotalElement) weeklyPoolTotalElement.textContent = weeklyPool.toFixed(2);
    if (weeklyPoolPerWeekElement) weeklyPoolPerWeekElement.textContent = (weeklyPool / 18).toFixed(2);
    if (seasonPoolTotalElement) seasonPoolTotalElement.textContent = seasonPool.toFixed(2);
    if (unallocatedAmountElement) unallocatedAmountElement.textContent = unallocated.toFixed(2);
    
    // Color code unallocated amount
    const unallocatedContainer = document.getElementById('unallocatedContainer');
    if (unallocatedContainer) {
        if (unallocated < 0) {
            unallocatedContainer.innerHTML = `<span class="text-danger">-$${Math.abs(unallocated).toFixed(2)}</span>`;
        } else if (unallocated > 0) {
            unallocatedContainer.innerHTML = `<span class="text-success">$${unallocated.toFixed(2)}</span>`;
        } else {
            unallocatedContainer.innerHTML = `<span class="text-secondary">$${unallocated.toFixed(2)}</span>`;
        }
    }
    
    // Update position breakdowns
    updateWeeklyPositionBreakdown();
    updateSeasonPositionBreakdown();
}

// Change weekly positions
function changeWeeklyPositions(delta) {
    const input = document.getElementById('weekly_positions');
    const label = document.getElementById('weeklyPositionsLabel');
    let current = parseInt(input.value) || 3;
    let newValue = Math.max(1, Math.min(10, current + delta));
    
    input.value = newValue;
    label.textContent = newValue;
    updatePayoutCalculations();
}

// Change season positions
function changeSeasonPositions(delta) {
    const input = document.getElementById('season_positions');
    const label = document.getElementById('seasonPositionsLabel');
    let current = parseInt(input.value) || 3;
    let newValue = Math.max(1, Math.min(10, current + delta));
    
    input.value = newValue;
    label.textContent = newValue;
    updatePayoutCalculations();
}

// Update weekly position inputs
function updateWeeklyPositions() {
    updatePayoutCalculations();
}

// Update season position inputs
function updateSeasonPositions() {
    updatePayoutCalculations();
}

// Generate weekly position breakdown
function updateWeeklyPositionBreakdown() {
    const container = document.getElementById('weeklyPositionBreakdown');
    const positions = parseInt(document.getElementById('weekly_positions').value) || 0;
    const weeklyPool = currentPayoutData.weeklyPool;
    const perWeek = weeklyPool / 18;
    
    if (positions === 0 || !document.getElementById('weekly_pool_enabled').checked) {
        container.innerHTML = '<div class="text-muted">Weekly payouts disabled</div>';
        return;
    }
    
    // Default percentage distributions
    const defaultDistributions = {
        1: [100],
        2: [60, 40],
        3: [60, 30, 10],
        4: [50, 30, 15, 5],
        5: [40, 25, 20, 10, 5],
        6: [35, 25, 18, 12, 7, 3],
        7: [30, 22, 18, 15, 10, 4, 1],
        8: [28, 20, 16, 14, 12, 6, 3, 1],
        9: [25, 18, 15, 12, 10, 8, 6, 4, 2],
        10: [22, 16, 14, 12, 10, 8, 6, 5, 4, 3]
    };
    
    const distribution = defaultDistributions[positions] || [];
    
    // Use smaller columns when there are many positions
    const colSize = positions <= 4 ? 'col-md-6' : positions <= 6 ? 'col-lg-4' : 'col-lg-3';
    
    let html = '<div class="row g-2">';
    for (let i = 1; i <= positions; i++) {
        const percentage = distribution[i-1] || (100 / positions);
        const amount = (perWeek * percentage) / 100;
        const positionSuffix = i === 1 ? 'st' : i === 2 ? 'nd' : i === 3 ? 'rd' : 'th';
        
        html += `
            <div class="${colSize}">
                <div class="input-group input-group-sm">
                    <span class="input-group-text">${i}${positionSuffix}</span>
                    <input type="number" class="form-control weekly-position-input" 
                           value="${percentage.toFixed(1)}" step="0.1" min="0" max="100"
                           data-position="${i}">
                    <span class="input-group-text">%</span>
                    <span class="input-group-text text-success">$${amount.toFixed(2)}</span>
                </div>
            </div>
        `;
    }
    html += '</div>';
    
    // Add total verification
    const totalPercent = distribution.reduce((sum, val) => sum + val, 0);
    if (Math.abs(totalPercent - 100) > 0.1) {
        html += `<div class="alert alert-warning mt-2 py-1">
            <small><i class="fas fa-exclamation-triangle me-1"></i>
            Total: ${totalPercent.toFixed(1)}% (should equal 100%)</small>
        </div>`;
    }
    
    container.innerHTML = html;
}

// Generate season position breakdown
function updateSeasonPositionBreakdown() {
    const container = document.getElementById('seasonPositionBreakdown');
    const positions = parseInt(document.getElementById('season_positions').value) || 0;
    const seasonPool = currentPayoutData.seasonPool;
    
    if (positions === 0 || !document.getElementById('season_pool_enabled').checked) {
        container.innerHTML = '<div class="text-muted">Season payouts disabled</div>';
        return;
    }
    
    // Default percentage distributions
    const defaultDistributions = {
        1: [100],
        2: [70, 30],
        3: [50, 30, 20],
        4: [40, 30, 20, 10],
        5: [35, 25, 20, 15, 5],
        6: [30, 22, 18, 15, 10, 5],
        7: [25, 20, 18, 15, 12, 7, 3],
        8: [22, 18, 16, 14, 12, 8, 6, 4],
        9: [20, 16, 14, 12, 11, 9, 7, 6, 5],
        10: [18, 15, 13, 12, 10, 9, 8, 6, 5, 4]
    };
    
    const distribution = defaultDistributions[positions] || [];
    
    // Use smaller columns when there are many positions
    const colSize = positions <= 4 ? 'col-md-6' : positions <= 6 ? 'col-lg-4' : 'col-lg-3';
    
    let html = '<div class="row g-2">';
    for (let i = 1; i <= positions; i++) {
        const percentage = distribution[i-1] || (100 / positions);
        const amount = (seasonPool * percentage) / 100;
        const positionSuffix = i === 1 ? 'st' : i === 2 ? 'nd' : i === 3 ? 'rd' : 'th';
        
        html += `
            <div class="${colSize}">
                <div class="input-group input-group-sm">
                    <span class="input-group-text">${i}${positionSuffix}</span>
                    <input type="number" class="form-control season-position-input" 
                           value="${percentage.toFixed(1)}" step="0.1" min="0" max="100"
                           data-position="${i}">
                    <span class="input-group-text">%</span>
                    <span class="input-group-text text-success">$${amount.toFixed(2)}</span>
                </div>
            </div>
        `;
    }
    html += '</div>';
    
    // Add total verification
    const totalPercent = distribution.reduce((sum, val) => sum + val, 0);
    if (Math.abs(totalPercent - 100) > 0.1) {
        html += `<div class="alert alert-warning mt-2 py-1">
            <small><i class="fas fa-exclamation-triangle me-1"></i>
            Total: ${totalPercent.toFixed(1)}% (should equal 100%)</small>
        </div>`;
    }
    
    container.innerHTML = html;
}

// Update weekly position percentage
function updateWeeklyPositionValue(position, percentage) {
    // This would update the position-specific percentage
    // For now, just recalculate the display
    updateWeeklyPositionBreakdown();
}

// Update season position percentage
function updateSeasonPositionValue(position, percentage) {
    // This would update the position-specific percentage
    // For now, just recalculate the display
    updateSeasonPositionBreakdown();
}

// Update purse display from server data
function updatePurseDisplay(payoutData) {
    const totalPurseElement = document.getElementById('totalPurse');
    if (totalPurseElement && payoutData && payoutData.totalPurse !== undefined) {
        totalPurseElement.textContent = payoutData.totalPurse.toFixed(2);
        currentPayoutData.totalPurse = payoutData.totalPurse;
        updatePayoutCalculations();
    }
}

// Recalculate purse from server
function recalculatePurse() {
    fetch(`/leagues/<%= league.league_id %>/recalculate-purse`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('totalPurse').textContent = data.totalPurse.toFixed(2);
            currentPayoutData.totalPurse = data.totalPurse;
            updatePayoutCalculations();
            showToast('Purse recalculated successfully', 'success');
        } else {
            showToast(data.message || 'Error recalculating purse', 'error');
        }
    })
    .catch(error => {
        showToast('Error recalculating purse', 'error');
    });
}

// Fix CSP violations - add event listeners
document.getElementById('recalculate-purse-btn')?.addEventListener('click', recalculatePurse);

document.querySelectorAll('[data-action]').forEach(button => {
    button.addEventListener('click', function() {
        const action = this.getAttribute('data-action');
        if (action === 'weekly-decrease') {
            changeWeeklyPositions(-1);
        } else if (action === 'weekly-increase') {
            changeWeeklyPositions(1);
        } else if (action === 'season-decrease') {
            changeSeasonPositions(-1);
        } else if (action === 'season-increase') {
            changeSeasonPositions(1);
        }
    });
});

</script>