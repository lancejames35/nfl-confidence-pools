<div class="row">
    <div class="col-12">
        
        <!-- Enhanced Header Section with League Switcher -->
        <div class="results-header-enhanced mb-4">
            <div class="header-background"></div>
            <div class="header-content">
                <div class="header-single-row d-flex justify-content-between align-items-center">
                    <!-- Left: League Switcher and Title -->
                    <div class="header-left d-flex align-items-center gap-3">
                        <!-- League Switcher Dropdown -->
                        <% if (locals.userLeagues && locals.userLeagues.length > 1) { %>
                            <div class="league-switcher">
                                <select class="form-select" id="league-switcher">
                                    <% locals.userLeagues.forEach(l => { %>
                                        <option value="<%= l.league_id %>/<%= l.entry_id || 'new' %>" 
                                                <%= l.league_id === league.league_id ? 'selected' : '' %>
                                                data-league-id="<%= l.league_id %>"
                                                data-entry-id="<%= l.entry_id || 'new' %>">
                                            <%= l.league_name %> 
                                            <% if (!l.entry_id) { %>(No Entry)<% } %>
                                        </option>
                                    <% }) %>
                                </select>
                            </div>
                        <% } %>
                        <div class="title-main">
                            <i class="fas fa-edit me-2"></i>
                            Week <%= week %> Picks
                            <% if (locals.userLeagues && locals.userLeagues.length <= 1) { %>
                                <small class="text-muted d-block" style="font-size: 0.8em; font-weight: normal;">
                                    <%= league.league_name %>
                                </small>
                            <% } %>
                        </div>
                    </div>
                    
                    <!-- Center: Status -->
                    <div class="header-center d-flex gap-3">
                        <div class="stat-card">
                            <div class="stat-value" data-status="<%= canEdit ? 'open' : 'closed' %>"><%= canEdit ? 'OPEN' : 'CLOSED' %></div>
                            <div class="stat-label">Status</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value"><%= week %></div>
                            <div class="stat-label">Week</div>
                        </div>
                    </div>
                    
                    <!-- Right: Week Navigation -->
                    <div class="header-right">
                        <div class="week-navigation d-flex align-items-center gap-3">
                            <select class="form-select" id="week-selector">
                                <% for(let i = 1; i <= 18; i++) { %>
                                    <option value="<%= i %>" <%= week == i ? 'selected' : '' %>>
                                        Week <%= i %>
                                    </option>
                                <% } %>
                            </select>
                            
                            <div class="d-flex gap-2">
                                <% if (week > 1) { %>
                                    <% 
                                        let prevWeek = parseInt(week) - 1;
                                        let prevUrl = `?week=${prevWeek}`;
                                    %>
                                    <a href="<%= prevUrl %>" class="btn btn-outline-secondary btn-sm">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                <% } else { %>
                                    <button class="btn btn-outline-secondary btn-sm" disabled>
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                <% } %>
                                
                                <% if (week < 18) { %>
                                    <% 
                                        let nextWeek = parseInt(week) + 1;
                                        let nextUrl = `?week=${nextWeek}`;
                                    %>
                                    <a href="<%= nextUrl %>" class="btn btn-outline-secondary btn-sm">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                <% } else { %>
                                    <button class="btn btn-outline-secondary btn-sm" disabled>
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <% if (!canEdit) { %>
            <div class="alert alert-info" role="alert">
                <i class="fas fa-eye me-2"></i>
                <strong>Viewing Your Picks:</strong> The pick deadline has passed. You can view your picks below but cannot make changes.
            </div>
        <% } %>

        <div class="row">
            <!-- Games List for Picking -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fas fa-football me-2"></i>
                                Week <%= week %> Games
                            </h5>
                            <div class="d-flex align-items-center justify-content-between flex-wrap gap-2">
                                <small class="text-muted fw-bold">Bulk Picks:</small>
                                <% if (canEdit) { %>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-outline-primary" id="select-all-home" title="Select all home teams">
                                            <i class="fas fa-home me-1"></i>Home
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" id="select-all-away" title="Select all away teams">
                                            <i class="fas fa-plane me-1"></i>Away
                                        </button>
                                        <% if (league.pick_method === 'against_spread' && games && games.some(game => game.point_spread)) { %>
                                            <button type="button" class="btn btn-outline-success" id="select-all-favorites" title="Select all favorites">
                                                <i class="fas fa-star me-1"></i>Favs
                                            </button>
                                            <button type="button" class="btn btn-outline-warning" id="select-all-underdogs" title="Select all underdogs">
                                                <i class="fas fa-underline me-1"></i>Dogs
                                            </button>
                                        <% } %>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <form id="picks-form" action="/picks/<%= league.league_id %>/<%= entry_id %>" method="POST">
                            <input type="hidden" name="_method" value="PUT">
                            <input type="hidden" name="week" value="<%= week %>">
                            
                            <div id="sortable-picks" class="list-group list-group-flush">
                                <% if (games && games.length > 0) { %>
                                    <% 
                                    // Step 1: Separate games with and without picks
                                    const gamesWithPicks = games.filter(game => existingPicks.find(p => p.game_id === game.game_id));
                                    const gamesWithoutPicks = games.filter(game => !existingPicks.find(p => p.game_id === game.game_id));
                                    
                                    // Step 2: Get used confidence values from existing picks
                                    const usedConfidenceValues = new Set(existingPicks.map(p => p.confidence_points));
                                    
                                    // Step 3: Create array of available confidence values (excluding used ones)
                                    const availableValues = [];
                                    for (let i = games.length; i >= 1; i--) {
                                        if (!usedConfidenceValues.has(i)) {
                                            availableValues.push(i);
                                        }
                                    }
                                    
                                    // Step 4: Sort games with picks by confidence (highest first)
                                    gamesWithPicks.sort((a, b) => {
                                        const pickA = existingPicks.find(p => p.game_id === a.game_id);
                                        const pickB = existingPicks.find(p => p.game_id === b.game_id);
                                        return pickB.confidence_points - pickA.confidence_points;
                                    });
                                    
                                    // Step 5: Assign available confidence values to games without picks
                                    gamesWithoutPicks.forEach((game, index) => {
                                        if (index < availableValues.length) {
                                            game._assignedConfidence = availableValues[index];
                                        }
                                    });
                                    
                                    // Step 6: Combine all games in final order
                                    const orderedGames = [...gamesWithPicks, ...gamesWithoutPicks];
                                    %>
                                    <% orderedGames.forEach((game, index) => { 
                                        const existingPick = existingPicks.find(p => p.game_id === game.game_id);
                                        const draftPick = draftPicks && draftPicks.picks ? draftPicks.picks.find(p => p.game_id === game.game_id) : null;
                                        const selectedTeam = existingPick ? existingPick.selected_team : (draftPick ? draftPick.selected_team : '');
                                        const confidencePoints = existingPick ? existingPick.confidence_points : (draftPick ? draftPick.confidence_points : game._assignedConfidence);
                                    %>
                                        <div class="list-group-item pick-item<%= (gameEditStatus && gameEditStatus[game.game_id] === false) ? ' locked' : '' %>" 
                                             data-game-id="<%= game.game_id %>" 
                                             data-confidence="<%= confidencePoints %>"
                                             data-locked="<%= (gameEditStatus && gameEditStatus[game.game_id] === false) ? 'true' : 'false' %>"
                                             draggable="false">
                                            
                                            <div class="row align-items-center">
                                                <!-- Drag Indicator -->
                                                <div class="col-auto drag-indicator">
                                                    <i class="fas fa-grip-vertical text-muted"></i>
                                                </div>

                                                <!-- Game Info & Team Selection -->
                                                <div class="col teams-section">
                                                    <div class="row align-items-center">
                                                        <div class="col-md-8">
                                                            <div class="game-info">
                                                                <!-- Mobile Game Time (centered above team buttons) -->
                                                                <div class="d-md-none text-center mb-2">
                                                                    <div class="mobile-game-time position-relative">
                                                                        <div class="game-time-mobile">
                                                                            <i class="fas fa-clock me-1"></i>
                                                                            <span class="game-time-display" data-timestamp="<%= game.kickoff_timestamp %>">Loading...</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                
                                                                <div class="teams-container">
                                                                    <div class="d-flex align-items-center">
                                                                        <!-- Confidence Points (moved to same row as teams) -->
                                                                        <div class="confidence-dropdown-container me-2">
                                                                            <select class="confidence-dropdown" data-game-id="<%= game.game_id %>" <%= !canEdit || (gameEditStatus && gameEditStatus[game.game_id] === false) ? 'disabled' : '' %>>
                                                                                <% for(let i = games.length; i >= 1; i--) { %>
                                                                                    <option value="<%= i %>" <%= confidencePoints == i ? 'selected' : '' %>><%= i %></option>
                                                                                <% } %>
                                                                            </select>
                                                                        </div>
                                                                        <input type="hidden" name="picks[<%= index %>][confidence_points]" value="<%= confidencePoints %>" class="confidence-input">
                                                                        <input type="hidden" name="picks[<%= index %>][game_id]" value="<%= game.game_id %>">
                                                                        <input type="hidden" name="picks[<%= index %>][pick_type]" value="confidence">
                                                                        <!-- Away Team -->
                                                                        <div class="team-option flex-fill <%= selectedTeam === game.away_team ? 'selected' : '' %> <%= game.point_spread && league.pick_method === 'against_spread' ? 'has-spread' : '' %>" 
                                                                             data-team="<%= game.away_team %>">
                                                                            <input type="radio" 
                                                                                   name="picks[<%= index %>][selected_team]" 
                                                                                   value="<%= game.away_team %>" 
                                                                                   id="away_<%= game.game_id %>"
                                                                                   <%= selectedTeam === game.away_team ? 'checked' : '' %>
                                                                                   <%= !canEdit || (gameEditStatus && gameEditStatus[game.game_id] === false) ? 'disabled' : '' %>>
                                                                            <label for="away_<%= game.game_id %>" class="team-label <%= game.point_spread && league.pick_method === 'against_spread' ? 'has-spread' : '' %>">
                                                                                <div class="team-content">
                                                                                    <% if (game.away_logo) { %>
                                                                                        <img src="<%= game.away_logo %>" alt="<%= game.away_team %>" class="team-logo me-2">
                                                                                    <% } %>
                                                                                    <div class="team-info-container">
                                                                                        <div class="team-name-line">
                                                                                            <span class="team-name"><%= game.away_team_name || game.away_team %></span>
                                                                                            <span class="team-abbr"><%= game.away_team %></span>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                                <% if (game.point_spread && league.pick_method === 'against_spread') { %>
                                                                                    <div class="spread-edge <%= game.favored_team === game.away_team ? 'favorite' : 'underdog' %>">
                                                                                        <% if (game.favored_team === game.away_team) { %>
                                                                                            -<%= game.spread_amount %>
                                                                                        <% } else { %>
                                                                                            +<%= game.spread_amount %>
                                                                                        <% } %>
                                                                                    </div>
                                                                                <% } %>
                                                                            </label>
                                                                        </div>
                                                                        
                                                                        <!-- @ Symbol -->
                                                                        <div class="at-symbol mx-2 text-muted">@</div>
                                                                        
                                                                        <!-- Home Team -->
                                                                        <div class="team-option flex-fill <%= selectedTeam === game.home_team ? 'selected' : '' %> <%= game.point_spread && league.pick_method === 'against_spread' ? 'has-spread' : '' %>" 
                                                                             data-team="<%= game.home_team %>">
                                                                            <input type="radio" 
                                                                                   name="picks[<%= index %>][selected_team]" 
                                                                                   value="<%= game.home_team %>" 
                                                                                   id="home_<%= game.game_id %>"
                                                                                   <%= selectedTeam === game.home_team ? 'checked' : '' %>
                                                                                   <%= !canEdit || (gameEditStatus && gameEditStatus[game.game_id] === false) ? 'disabled' : '' %>>
                                                                            <label for="home_<%= game.game_id %>" class="team-label <%= game.point_spread && league.pick_method === 'against_spread' ? 'has-spread' : '' %>">
                                                                                <div class="team-content">
                                                                                    <% if (game.home_logo) { %>
                                                                                        <img src="<%= game.home_logo %>" alt="<%= game.home_team %>" class="team-logo me-2">
                                                                                    <% } %>
                                                                                    <div class="team-info-container">
                                                                                        <div class="team-name-line">
                                                                                            <span class="team-name"><%= game.home_team_name || game.home_team %></span>
                                                                                            <span class="team-abbr"><%= game.home_team %></span>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                                <% if (game.point_spread && league.pick_method === 'against_spread') { %>
                                                                                    <div class="spread-edge <%= game.favored_team === game.home_team ? 'favorite' : 'underdog' %>">
                                                                                        <% if (game.favored_team === game.home_team) { %>
                                                                                            -<%= game.spread_amount %>
                                                                                        <% } else { %>
                                                                                            +<%= game.spread_amount %>
                                                                                        <% } %>
                                                                                    </div>
                                                                                <% } %>
                                                                            </label>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        
                                                        <!-- Game Details (Desktop Only) -->
                                                        <div class="col-md-4 text-end d-none d-md-block">
                                                            <div class="game-details position-relative">
                                                                <div class="game-time">
                                                                    <i class="fas fa-clock me-1"></i>
                                                                    <span class="game-time-display" data-timestamp="<%= game.kickoff_timestamp %>">Loading...</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    <% }) %>
                                <% } else { %>
                                    <div class="list-group-item">
                                        <div class="text-center py-4">
                                            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                                            <p class="text-muted mb-0">No games available for Week <%= week %></p>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                            
                            <% if (games && games.length > 0) { %>
                                <% if (canEdit) { %>
                                    <div class="card-footer">
                                        <div class="d-grid gap-2 d-md-flex justify-content-md-between">
                                            <div>
                                                <button type="button" class="btn btn-outline-secondary" id="reset-picks">
                                                    <i class="fas fa-undo me-2"></i>Reset
                                                </button>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <small class="text-muted d-flex align-items-center">
                                                <i class="fas fa-info-circle me-1"></i>
                                                <span>Your picks are automatically saved as you make changes.</span>
                                                <span id="save-status" class="ms-2" style="display: none;">
                                                    <i class="fas fa-spinner fa-spin text-primary me-1"></i>
                                                    <span class="text-primary">Saving...</span>
                                                </span>
                                            </small>
                                        </div>
                                    </div>
                                <% } else { %>
                                    <div class="card-footer">
                                        <small class="text-muted d-flex align-items-center">
                                            <i class="fas fa-eye me-1"></i>
                                            <span>Your picks have been submitted and are locked for this week.</span>
                                        </small>
                                    </div>
                                <% } %>
                            <% } %>
                            
                            <!-- Tiebreaker Section -->
                            <% if (league.settings && (league.settings.primary_tiebreaker === 'mnf_total' || league.settings.secondary_tiebreaker === 'mnf_total')) { %>
                                <div class="card mt-3">
                                    <div class="card-header">
                                        <h5 class="mb-0">
                                            <i class="fas fa-balance-scale me-2"></i>
                                            Tiebreaker
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <% 
                                            // DEBUG: Log all games to see what we have
                                            console.log('DEBUG: All games in array (' + (games ? games.length : 'null') + '):');
                                            if (games) {
                                                games.forEach((game, index) => {
                                                    console.log(`  ${index + 1}. ${game.away_team} @ ${game.home_team} - ${new Date(game.kickoff_timestamp).toString()}`);
                                                });
                                            }
                                            
                                            // Find the last game of the week (typically Monday Night Football)
                                            // Games are already sorted by kickoff_timestamp from the SQL query
                                            let mondayGame = null;
                                            if (games && games.length > 0) {
                                                // The games array should already be sorted by kickoff time from the database
                                                // But let's sort again to be sure
                                                const sortedGames = [...games].sort((a, b) => {
                                                    const dateA = new Date(a.kickoff_timestamp).getTime();
                                                    const dateB = new Date(b.kickoff_timestamp).getTime();
                                                    return dateA - dateB;
                                                });
                                                
                                                // Get the last game (latest kickoff time)
                                                mondayGame = sortedGames[sortedGames.length - 1];
                                                console.log('DEBUG: Selected tiebreaker game:', mondayGame.away_team, '@', mondayGame.home_team);
                                            }
                                        %>
                                        
                                        <% if (mondayGame) { %>
                                            <div class="row align-items-center">
                                                <div class="col-md-8">
                                                    <h6 class="mb-2">Tiebreaker - Total Points</h6>
                                                    <p class="text-muted small mb-2">
                                                        Predict the combined total points scored by both teams in the last game of the week:
                                                        <strong><%= mondayGame.away_team %> @ <%= mondayGame.home_team %></strong>
                                                    </p>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label for="tiebreaker_prediction" class="form-label">Total Points</label>
                                                        <input 
                                                            type="number" 
                                                            class="form-control" 
                                                            id="tiebreaker_prediction"
                                                            name="tiebreaker_prediction"
                                                            value="<%= locals.tiebreakerValue ? Math.round(locals.tiebreakerValue) : '' %>"
                                                            min="0" 
                                                            max="150"
                                                            step="1"
                                                            placeholder="e.g. 45"
                                                            <%= !canEdit ? 'disabled' : '' %>
                                                        >
                                                    </div>
                                                </div>
                                            </div>
                                        <% } else { %>
                                            <div class="text-center text-muted">
                                                <i class="fas fa-info-circle me-2"></i>
                                                No Monday Night Football game found for Week <%= week %>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            <% } %>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Sidebar - Pick Summary & Stats -->
            <div class="col-lg-4">
                <div class="sticky-top" style="top: 20px;">
                    <!-- Pick Summary -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-list-ol me-2"></i>Pick Summary
                            </h6>
                        </div>
                        <div class="card-body">
                            <div id="picks-summary">
                                <div class="text-center text-muted">
                                    <i class="fas fa-arrow-left me-2"></i>
                                    Make your picks to see summary
                                </div>
                            </div>
                            <div class="progress mt-3">
                                <div class="progress-bar" role="progressbar" style="width: 0%" id="completion-progress"></div>
                            </div>
                            <small class="text-muted d-block mt-2">
                                <span id="completed-picks">0</span> of <%= games ? games.length : 0 %> picks made
                            </small>
                        </div>
                    </div>


                    <!-- Quick Tips -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-lightbulb me-2"></i>Quick Tips
                            </h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0 small">
                                <li class="mb-2">
                                    <i class="fas fa-arrows-alt text-primary me-2"></i>
                                    Drag games to reorder by confidence
                                </li>
                                <li class="mb-2">
                                    <i class="fas fa-star text-warning me-2"></i>
                                    Higher confidence = more points if correct
                                </li>
                                <li class="mb-2">
                                    <i class="fas fa-clock text-info me-2"></i>
                                    Picks lock when games start
                                </li>
                                <% if (league.pick_method === 'against_spread') { %>
                                    <li class="mb-2">
                                        <i class="fas fa-chart-line text-success me-2"></i>
                                        <strong>Spread Betting:</strong>
                                    </li>
                                    <li class="mb-2 ms-3">
                                        <span class="text-danger fw-bold">Red (-7)</span> = Team must win by 8+
                                    </li>
                                    <li class="mb-2 ms-3">
                                        <span class="text-success fw-bold">Green (+7)</span> = Team gets 7 extra points
                                    </li>
                                <% } %>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom CSS for picks interface -->
<!-- External stylesheet for picks page -->
<link rel="stylesheet" href="/css/picks-page.css">

<style>
/* Conditional styles that depend on server-side logic */

/* Disabled state styles for when picks are locked/closed */
<% if (!canEdit) { %>
.pick-item {
    cursor: default !important;
}

.pick-item:hover {
    background: inherit !important;
    border-left-color: transparent !important;
    border-left-width: 4px !important;
    transform: none !important;
    box-shadow: none !important;
    transition: none !important;
}

.drag-indicator {
    cursor: default !important;
    opacity: 0.2 !important;
}

.pick-item:hover .drag-indicator {
    opacity: 0.2 !important;
}

.confidence-dropdown {
    cursor: default !important;
    pointer-events: none !important;
}

.confidence-dropdown:hover,
.confidence-dropdown:focus,
.confidence-dropdown:active {
    cursor: default !important;
    background-color: #007bff !important;
    border-color: #007bff !important;
    box-shadow: none !important;
}

.team-option {
    cursor: default !important;
    pointer-events: none !important;
}

.team-option:hover {
    border-color: #e9ecef !important;
    background-color: #ffffff !important;
    transform: none !important;
    box-shadow: none !important;
}

.team-label {
    cursor: default !important;
}

.pick-item .teams-container,
.pick-item .teams-container *,
.pick-item .confidence-dropdown-container,
.pick-item .confidence-dropdown-container * {
    cursor: default !important;
    pointer-events: none !important;
}

/* Keep selected states visible but not interactive */
.team-option.selected {
    border-color: #007bff !important;
    background-color: #e3f2fd !important;
    box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25) !important;
    cursor: default !important;
    pointer-events: none !important;
}

.team-option.selected:hover {
    border-color: #007bff !important;
    background-color: #e3f2fd !important;
}

/* Disable sortable effects when locked */
.pick-item.sortable-chosen,
.pick-item.sortable-ghost {
    background: inherit !important;
    border-left-color: transparent !important;
    cursor: default !important;
    transform: none !important;
    box-shadow: none !important;
    z-index: auto !important;
    animation: none !important;
}

/* Mobile disabled states */
@media (max-width: 767px) {
    .drag-indicator {
        cursor: default !important;
        opacity: 0.2 !important;
        background: rgba(0, 123, 255, 0.05) !important;
    }
    
    .drag-indicator:hover {
        opacity: 0.2 !important;
        background: rgba(0, 123, 255, 0.05) !important;
        transform: none !important;
    }
    
    .pick-item:hover {
        transform: none !important;
        box-shadow: none !important;
    }
    
    .pick-item.sortable-chosen {
        transform: none !important;
        box-shadow: none !important;
        border-radius: 6px !important;
        animation: none !important;
    }
    
    .pick-item.sortable-ghost {
        transform: none !important;
        border-width: 4px !important;
        border-radius: 6px !important;
    }
    
    .pick-item.sortable-chosen .drag-indicator {
        color: inherit !important;
        font-size: 1rem !important;
        background: rgba(0, 123, 255, 0.05) !important;
        animation: none !important;
    }
}
<% } %>

/* All static styles moved to external CSS file: /css/picks-page.css */

</style>

<!-- Include SortableJS for drag & drop -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Define variables from server-side data
    const entryId = '<%= entry_id %>';
    const currentWeek = <%= week %>;
    
    const sortableEl = document.getElementById('sortable-picks');
    const form = document.getElementById('picks-form');
    let autoSaveTimeout;
    
    
    // Convert game times to user's local timezone (using same logic as dashboard)
    function convertGameTimesToUserTimezone() {
        const gameTimeElements = document.querySelectorAll('.game-time-display');
        
        gameTimeElements.forEach(element => {
            const timestamp = element.getAttribute('data-timestamp');
            if (timestamp) {
                try {
                    // Parse the timestamp directly - MySQL timestamps are already in the server's timezone
                    const gameDate = new Date(timestamp);
                    
                    // Get user's timezone
                    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                    
                    // Keep the same format for all screens - just adjust size with CSS
                    const formattedTime = new Intl.DateTimeFormat('en-US', {
                        timeZone: userTimezone,
                        weekday: 'short',
                        month: 'short',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        timeZoneName: 'short'
                    }).format(gameDate);
                    
                    element.textContent = formattedTime;
                } catch (error) {
                    console.error('Error converting game timestamp:', timestamp, error);
                    element.textContent = 'Time unavailable';
                }
            }
        });
    }
    
    // Convert times immediately when page loads
    convertGameTimesToUserTimezone();
    
    // Update times when window is resized (handles orientation changes)
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function() {
            convertGameTimesToUserTimezone();
        }, 250);
    });
    
    // Store selections globally to preserve during drag operations
    let storedSelections = new Map();
    
    // Store original database order for reset functionality
    let originalOrder = [];
    
    function storeAllSelections() {
        storedSelections.clear();
        sortableEl.querySelectorAll('.pick-item').forEach(item => {
            const gameId = item.getAttribute('data-game-id');
            const selectedRadio = item.querySelector('input[name*="[selected_team]"]:checked');
            if (selectedRadio && gameId) {
                storedSelections.set(gameId, selectedRadio.value);
            }
        });
    }
    
    function restoreAllSelections() {
        storedSelections.forEach((selectedTeam, gameId) => {
            const item = sortableEl.querySelector(`[data-game-id="${gameId}"]`);
            if (item) {
                // Clear all selections for this item first
                item.querySelectorAll('.team-option').forEach(opt => opt.classList.remove('selected'));
                item.querySelectorAll('input[name*="[selected_team]"]').forEach(radio => radio.checked = false);
                
                // Find and set the correct selection
                const targetRadio = item.querySelector(`input[value="${selectedTeam}"]`);
                const targetOption = item.querySelector(`[data-team="${selectedTeam}"]`);
                
                if (targetRadio && targetOption) {
                    targetRadio.checked = true;
                    targetOption.classList.add('selected');
                }
            }
        });
    }
    
    // Initialize Sortable with mobile-specific drag handle configuration
    const isMobile = window.innerWidth <= 767;
    const sortable = new Sortable(sortableEl, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        disabled: <%= !canEdit ? 'true' : 'false' %>,
        // On mobile: ONLY drag from the drag indicator
        // On desktop: drag from anywhere except interactive elements
        handle: isMobile ? '.drag-indicator' : null,
        filter: isMobile 
            ? '.locked' // Prevent dragging locked items on mobile
            : '.confidence-dropdown, .confidence-dropdown-container, .team-option, .teams-container, .locked',
        preventOnFilter: false, // Don't prevent events, just don't drag
        forceFallback: true, // Force fallback to avoid browser drag conflicts
        move: function(evt) {
            const draggedItem = evt.dragged;
            const relatedItem = evt.related;
            
            // If dragged item is locked, don't allow it to move
            if (draggedItem && (draggedItem.classList.contains('locked') || draggedItem.getAttribute('data-locked') === 'true')) {
                return false;
            }
            
            // Allow movement around locked items - they will be handled in the confidence reassignment logic
            return true;
        },
        onStart: function(evt) {
            storeAllSelections();
        },
        onEnd: function(evt) {
            // With improved confidence assignment logic, we just need to reassign confidence values
            updateConfidencePoints();
            
            // Use setTimeout to ensure DOM is settled before restoring
            setTimeout(() => {
                restoreAllSelections();
                updatePicksSummary();
                autoSave();
            }, 100);
        }
    });
    
    // Update confidence points after reordering - IMPROVED ALGORITHM
    function updateConfidencePoints() {
        const items = sortableEl.querySelectorAll('.pick-item');
        const totalGames = items.length;
        
        // Step 1: Get all locked confidence values and their positions
        const lockedConfidenceValues = new Set();
        const lockedItems = [];
        
        items.forEach((item, position) => {
            if (item.classList.contains('locked') || item.getAttribute('data-locked') === 'true') {
                const lockedConfidence = parseInt(item.getAttribute('data-confidence'));
                if (!isNaN(lockedConfidence)) {
                    lockedConfidenceValues.add(lockedConfidence);
                    lockedItems.push({
                        element: item,
                        confidence: lockedConfidence,
                        position: position
                    });
                }
            }
        });
        
        // Step 2: Create array of available confidence values (excluding locked ones)
        const availableConfidenceValues = [];
        for (let i = totalGames; i >= 1; i--) {
            if (!lockedConfidenceValues.has(i)) {
                availableConfidenceValues.push(i);
            }
        }
        // Sort highest to lowest for proper assignment
        availableConfidenceValues.sort((a, b) => b - a);
        
        // Step 3: Assign confidence values to unlocked items based on their position
        let availableIndex = 0;
        const itemsArray = Array.from(items);
        
        itemsArray.forEach((item, position) => {
            // Skip locked items - they keep their confidence unchanged
            if (item.classList.contains('locked') || item.getAttribute('data-locked') === 'true') {
                return;
            }
            
            // Assign next available confidence value to this unlocked item
            if (availableIndex < availableConfidenceValues.length) {
                const newConfidence = availableConfidenceValues[availableIndex];
                const dropdown = item.querySelector('.confidence-dropdown');
                const input = item.querySelector('.confidence-input');
                
                // Update data attribute
                item.setAttribute('data-confidence', newConfidence);
                
                // Update hidden input
                if (input) {
                    input.value = newConfidence;
                }
                
                // Update dropdown
                if (dropdown) {
                    dropdown.value = newConfidence;
                }
                
                availableIndex++;
            }
        });
        
        // Step 4: Re-sort all items by confidence value to maintain proper visual order
        const allItems = Array.from(sortableEl.querySelectorAll('.pick-item'));
        allItems.sort((a, b) => {
            const confA = parseInt(a.getAttribute('data-confidence')) || 0;
            const confB = parseInt(b.getAttribute('data-confidence')) || 0;
            return confB - confA; // Highest to lowest
        });
        
        // Re-append items in correct order
        allItems.forEach(item => {
            sortableEl.appendChild(item);
        });
        
        // Update dropdown options after confidence changes
        updateDropdownOptions();
    }
    
    // Update picks summary
    function updatePicksSummary() {
        try {
            // Simple count of checked radio buttons
            const picksWithTeams = document.querySelectorAll('input[name*="[selected_team]"]:checked').length;
            const totalPicks = <%= games ? games.length : 0 %>;
            const progressPercent = (picksWithTeams / totalPicks) * 100;
            
            
            const completedPicksEl = document.getElementById('completed-picks');
            const progressEl = document.getElementById('completion-progress');
            
            if (completedPicksEl) completedPicksEl.textContent = picksWithTeams;
            if (progressEl) progressEl.style.width = progressPercent + '%';
            
            const summaryEl = document.getElementById('picks-summary');
            if (!summaryEl) return;
            
            if (picksWithTeams > 0) {
                // Show a simple completion status instead of redundant list
                let summaryHTML = '<div class="small">';
                
                const canEdit = <%= canEdit ? 'true' : 'false' %>;
                
                if (picksWithTeams === totalPicks) {
                    if (canEdit) {
                        summaryHTML += `
                            <div class="text-center">
                                <div class="text-success mb-2">
                                    <i class="fas fa-check-circle me-2"></i>
                                    <strong>All picks complete!</strong>
                                </div>
                                <div class="text-muted small">
                                    Ready to submit when deadline arrives
                                </div>
                            </div>
                        `;
                    } else {
                        summaryHTML += `
                            <div class="text-center">
                                <div class="text-info mb-2">
                                    <i class="fas fa-lock me-2"></i>
                                    <strong>All picks submitted!</strong>
                                </div>
                                <div class="text-muted small">
                                    Picks are locked for this week
                                </div>
                            </div>
                        `;
                    }
                } else {
                    const remaining = totalPicks - picksWithTeams;
                    if (canEdit) {
                        summaryHTML += `
                            <div class="text-center">
                                <div class="mb-2">
                                    <i class="fas fa-clock me-2 text-warning"></i>
                                    <strong>${remaining} pick${remaining === 1 ? '' : 's'} remaining</strong>
                                </div>
                                <div class="text-muted small">
                                    ${Math.round((picksWithTeams / totalPicks) * 100)}% complete
                                </div>
                            </div>
                        `;
                    } else {
                        summaryHTML += `
                            <div class="text-center">
                                <div class="mb-2">
                                    <i class="fas fa-exclamation-triangle me-2 text-warning"></i>
                                    <strong>Incomplete picks (${remaining} missing)</strong>
                                </div>
                                <div class="text-muted small">
                                    Deadline has passed - picks are locked
                                </div>
                            </div>
                        `;
                    }
                }
                
                summaryHTML += '</div>';
                summaryEl.innerHTML = summaryHTML;
            } else {
                summaryEl.innerHTML = '<div class="text-center text-muted"><i class="fas fa-arrow-left me-2"></i>Make your picks to see summary</div>';
            }
        } catch (error) {
            // Silent error handling for picks summary
        }
    }
    
    // Auto-save functionality with improved debugging and reliability
    function autoSave() {
        console.log('AutoSave function called, canEdit:', <%= canEdit ? 'true' : 'false' %>);
        if (!<%= canEdit ? 'true' : 'false' %>) {
            console.log('AutoSave skipped - canEdit is false');
            return;
        }
        
        clearTimeout(autoSaveTimeout);
        autoSaveTimeout = setTimeout(() => {
            console.log('AutoSave timeout triggered');
            
            // Show saving indicator
            const saveStatus = document.getElementById('save-status');
            if (saveStatus) {
                saveStatus.style.display = 'inline-flex';
            }
            
            const picks = [];
            
            // Collect all pick data - only include picks with selected teams
            sortableEl.querySelectorAll('.pick-item').forEach((item, index) => {
                const gameId = item.getAttribute('data-game-id');
                const confidenceInput = item.querySelector('.confidence-input');
                const confidence = confidenceInput ? confidenceInput.value : item.getAttribute('data-confidence');
                const selectedTeam = item.querySelector('input[name*="[selected_team]"]:checked');
                
                // Only include picks where a team has been selected
                if (gameId && confidence && selectedTeam && selectedTeam.value) {
                    const pickData = {
                        game_id: parseInt(gameId),
                        selected_team: selectedTeam.value,
                        confidence_points: parseInt(confidence),
                        pick_type: 'confidence'
                    };
                    
                    picks.push(pickData);
                }
            });
            
            
            // Get tiebreaker prediction if it exists
            const tiebreakerPrediction = document.getElementById('tiebreaker_prediction');
            console.log('Tiebreaker element found:', !!tiebreakerPrediction, 'Value:', tiebreakerPrediction?.value);
            
            const saveData = {
                week: <%= week %>,
                picks: picks
            };
            
            // Include tiebreaker if present
            if (tiebreakerPrediction && tiebreakerPrediction.value) {
                saveData.tiebreaker_prediction = tiebreakerPrediction.value;
                console.log('Including tiebreaker in save data:', tiebreakerPrediction.value);
            }

            console.log('About to send autosave request:', saveData);
            console.log('Number of picks being saved:', picks.length);
            
            // Don't show misleading "saved" message if no picks to save
            if (picks.length === 0) {
                console.log('No picks to save (no teams selected)');
                if (saveStatus) {
                    saveStatus.innerHTML = '<i class="fas fa-info-circle text-muted me-1"></i><span class="text-muted">Ready</span>';
                    setTimeout(() => {
                        if (saveStatus) saveStatus.style.display = 'none';
                    }, 2000);
                }
                return; // Exit early - no need to send empty request
            }

            // Send auto-save request
            fetch(`/picks/entry/<%= entry_id %>/autosave`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(saveData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show brief success indicator with count of picks saved
                    if (saveStatus) {
                        const pickCount = picks.length;
                        saveStatus.innerHTML = `<i class="fas fa-check text-success me-1"></i><span class="text-success">Saved ${pickCount} pick${pickCount !== 1 ? 's' : ''}</span>`;
                        setTimeout(() => {
                            saveStatus.style.display = 'none';
                        }, 2000);
                    }
                } else {
                    if (saveStatus) {
                        saveStatus.innerHTML = '<i class="fas fa-exclamation-triangle text-warning me-1"></i><span class="text-warning">Save failed</span>';
                        setTimeout(() => {
                            saveStatus.style.display = 'none';
                        }, 3000);
                    }
                }
            })
            .catch(error => {
                if (saveStatus) {
                    saveStatus.innerHTML = '<i class="fas fa-times text-danger me-1"></i><span class="text-danger">Save error</span>';
                    setTimeout(() => {
                        saveStatus.style.display = 'none';
                    }, 3000);
                }
            });
        }, 1500); // Reduced from 2000ms to 1500ms for faster saves
    }
    
    
    // Team selection functionality
    function attachTeamSelectionHandlers() {
        document.querySelectorAll('.team-option').forEach(teamOption => {
            // Remove existing listeners to prevent duplicates
            const newOption = teamOption.cloneNode(true);
            teamOption.parentNode.replaceChild(newOption, teamOption);
            
            newOption.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent any interference
                if (!<%= canEdit ? 'true' : 'false' %>) return;
                
                const radio = this.querySelector('input[type="radio"]');
                const pickItem = this.closest('.pick-item');
                
                // Check individual game editability for per-game leagues
                if (pickItem) {
                    const currentGameId = pickItem.getAttribute('data-game-id');
                    const gameEditStatusData = <%- JSON.stringify(gameEditStatus || {}) %>;
                    if (gameEditStatusData[currentGameId] === false) {
                        return; // Individual game is locked
                    }
                }
                
                if (!radio || !pickItem) return;
                
                // Clear other selections in this game
                pickItem.querySelectorAll('.team-option').forEach(opt => opt.classList.remove('selected'));
                
                // Select this option
                this.classList.add('selected');
                radio.checked = true;
                
                updatePicksSummary();
                autoSave();
            });
        });
    }
    
    // Initial attachment
    attachTeamSelectionHandlers();
    
    // Define the confidence change handler function - IMPROVED FOR LOCKED PICKS
    function handleConfidenceChange(e) {
        const dropdown = e.target;
        
        if (!<%= canEdit ? 'true' : 'false' %>) return;
        
        const pickItem = dropdown.closest('.pick-item');
        
        // Check individual game editability for per-game leagues
        if (pickItem) {
            const selectedGameId = pickItem.getAttribute('data-game-id');
            const gameEditStatusMap = <%- JSON.stringify(gameEditStatus || {}) %>;
            if (gameEditStatusMap[selectedGameId] === false) {
                // Reset dropdown to original value and return
                dropdown.value = pickItem.getAttribute('data-confidence');
                return;
            }
        }
        
        const newConfidence = parseInt(dropdown.value);
        const oldConfidence = parseInt(pickItem.getAttribute('data-confidence'));
        
        if (newConfidence === oldConfidence) return; // No change needed
        
        // Get all items and identify locked ones
        const allItems = Array.from(sortableEl.querySelectorAll('.pick-item'));
        const lockedConfidenceValues = new Set();
        
        allItems.forEach(item => {
            if ((item.classList.contains('locked') || item.getAttribute('data-locked') === 'true') && item !== pickItem) {
                const lockedConf = parseInt(item.getAttribute('data-confidence'));
                if (!isNaN(lockedConf)) {
                    lockedConfidenceValues.add(lockedConf);
                }
            }
        });
        
        // Check if the new confidence value is locked by another item
        if (lockedConfidenceValues.has(newConfidence)) {
            // Reset to original value
            dropdown.value = oldConfidence;
            return;
        }
        
        // Update this item's confidence
        pickItem.setAttribute('data-confidence', newConfidence);
        const confidenceInput = pickItem.querySelector('.confidence-input');
        if (confidenceInput) confidenceInput.value = newConfidence;
        
        // Now we need to reassign all unlocked items to available confidence values
        // Step 1: Get all available confidence values (excluding locked ones)
        const totalGames = allItems.length;
        const availableValues = [];
        for (let i = totalGames; i >= 1; i--) {
            if (!lockedConfidenceValues.has(i)) {
                availableValues.push(i);
            }
        }
        
        // Remove the newConfidence value since it's already assigned to the current item
        const newConfidenceIndex = availableValues.indexOf(newConfidence);
        if (newConfidenceIndex > -1) {
            availableValues.splice(newConfidenceIndex, 1);
        }
        availableValues.sort((a, b) => b - a); // Highest to lowest
        
        // Step 2: Get all unlocked items (excluding the one we just changed)
        const unlockedItems = allItems.filter(item => 
            item !== pickItem && 
            !item.classList.contains('locked') && 
            item.getAttribute('data-locked') !== 'true'
        );
        
        // Step 3: Sort unlocked items by their position in DOM (top to bottom = higher to lower confidence)
        unlockedItems.sort((a, b) => {
            const aIndex = Array.from(sortableEl.children).indexOf(a);
            const bIndex = Array.from(sortableEl.children).indexOf(b);
            return aIndex - bIndex;
        });
        
        // Step 4: Assign available confidence values to unlocked items
        unlockedItems.forEach((item, index) => {
            if (index < availableValues.length) {
                const assignedConfidence = availableValues[index];
                item.setAttribute('data-confidence', assignedConfidence);
                
                const input = item.querySelector('.confidence-input');
                const itemDropdown = item.querySelector('.confidence-dropdown');
                
                if (input) input.value = assignedConfidence;
                if (itemDropdown) {
                    itemDropdown.value = assignedConfidence;
                    // Force visual update
                    itemDropdown.style.display = 'none';
                    itemDropdown.offsetHeight;
                    itemDropdown.style.display = '';
                }
            }
        });
        
        // Reorder all items by their new confidence values
        reorderItemsByConfidence();
        
        // Update dropdown options
        updateDropdownOptions();
        
        updatePicksSummary();
        autoSave();
    }
    
    // Confidence dropdown handlers with proper logic
    function attachConfidenceHandlers() {
        document.querySelectorAll('.confidence-dropdown').forEach(dropdown => {
            // Remove existing listeners to prevent duplicates
            const newDropdown = dropdown.cloneNode(true);
            dropdown.parentNode.replaceChild(newDropdown, dropdown);
            
            newDropdown.addEventListener('change', handleConfidenceChange);
        });
        
        // Update dropdown options to disable locked values
        updateDropdownOptions();
    }
    
    // Update all dropdown options to disable values taken by locked games
    function updateDropdownOptions() {
        const items = sortableEl.querySelectorAll('.pick-item');
        const totalGames = items.length;
        
        // Get confidence values taken by locked games
        const lockedConfidenceValues = [];
        items.forEach((item) => {
            if (item.classList.contains('locked') || item.getAttribute('data-locked') === 'true') {
                lockedConfidenceValues.push(parseInt(item.getAttribute('data-confidence')));
            }
        });
        
        // Update each unlocked dropdown
        items.forEach((item) => {
            if (item.classList.contains('locked') || item.getAttribute('data-locked') === 'true') {
                return; // Skip locked items
            }
            
            const dropdown = item.querySelector('.confidence-dropdown');
            if (dropdown) {
                // Get the current value from the data attribute, not the dropdown value
                const currentValue = parseInt(item.getAttribute('data-confidence'));
                
                // Clear and rebuild options
                dropdown.innerHTML = '';
                
                // Build options in descending order (highest confidence first)
                for (let i = totalGames; i >= 1; i--) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    
                    // Disable if this value is taken by a locked game (unless it's current selection)
                    if (lockedConfidenceValues.includes(i) && i !== currentValue) {
                        option.disabled = true;
                        option.textContent += ' (locked)';
                    }
                    
                    if (i === currentValue) {
                        option.selected = true;
                    }
                    
                    dropdown.appendChild(option);
                }
                
                // Ensure the dropdown value matches the data attribute
                dropdown.value = currentValue;
            }
        });
    }
    
    // Initial attachment
    attachConfidenceHandlers();
    
    // Tiebreaker input handler
    function attachTiebreakerHandler() {
        const tiebreakerInput = document.getElementById('tiebreaker_prediction');
        if (tiebreakerInput) {
            tiebreakerInput.addEventListener('input', function() {
                if (!<%= canEdit ? 'true' : 'false' %>) return;
                console.log('Tiebreaker changed to:', this.value);
                autoSave();
            });
            
            // Prevent form submission on Enter key
            tiebreakerInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    console.log('Enter key prevented in tiebreaker field');
                    autoSave();
                }
            });
        }
    }
    
    // Initial attachment
    attachTiebreakerHandler();
    
    // Function to reorder items by confidence points
    function reorderItemsByConfidence() {
        const items = Array.from(sortableEl.querySelectorAll('.pick-item'));
        
        // Sort by confidence points (highest to lowest)
        items.sort((a, b) => {
            const aConf = parseInt(a.getAttribute('data-confidence'));
            const bConf = parseInt(b.getAttribute('data-confidence'));
            return bConf - aConf;
        });
        
        // Clear existing items and re-append in new order
        items.forEach(item => sortableEl.appendChild(item));
        
        // Note: updateConfidencePoints will be called after this function
        // to update all values just like drag and drop does
        
        // Re-attach event handlers after DOM manipulation
        attachTeamSelectionHandlers();
        attachConfidenceHandlers();
    }
    
    // Function to update all confidence values to match position - respects locked games
    function updateAllConfidenceValues() {
        const items = Array.from(sortableEl.querySelectorAll('.pick-item'));
        const totalGames = items.length;
        
        
        // Step 1: Identify locked games and their confidence values
        const lockedConfidenceValues = new Set();
        items.forEach((item, index) => {
            const isLocked = item.classList.contains('locked') || item.getAttribute('data-locked') === 'true';
            if (isLocked) {
                const lockedConfidence = parseInt(item.getAttribute('data-confidence'));
                lockedConfidenceValues.add(lockedConfidence);
            }
        });
        
        // Step 2: Create list of available confidence values (excluding locked ones)
        const availableValues = [];
        for (let i = totalGames; i >= 1; i--) {
            if (!lockedConfidenceValues.has(i)) {
                availableValues.push(i);
            }
        }
        
        
        // Step 3: Assign available values to unlocked games in position order
        let availableIndex = 0;
        items.forEach((item, index) => {
            const isLocked = item.classList.contains('locked') || item.getAttribute('data-locked') === 'true';
            
            if (!isLocked && availableIndex < availableValues.length) {
                const newConfidenceValue = availableValues[availableIndex];
                const dropdown = item.querySelector('.confidence-dropdown');
                const input = item.querySelector('.confidence-input');
                
                // Update data attribute first
                item.setAttribute('data-confidence', newConfidenceValue);
                
                // Update hidden input
                if (input) {
                    input.value = newConfidenceValue;
                }
                
                // Force dropdown to update by setting value and forcing repaint
                if (dropdown) {
                    dropdown.value = newConfidenceValue;
                    // Force the browser to repaint the dropdown
                    dropdown.style.display = 'none';
                    dropdown.offsetHeight; // Force reflow
                    dropdown.style.display = '';
                }
                
                availableIndex++;
            }
        });
    }
    
    // Reset picks button - clears database and UI
    document.getElementById('reset-picks')?.addEventListener('click', async function() {
        if (confirm('Reset unlocked picks? This will clear team selections for unlocked games only.')) {
            
            // First, reset the database by calling the backend
            try {
                const response = await fetch(`/picks/entry/${entryId}/reset`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ week: currentWeek })
                });
                
                if (!response.ok) {
                    throw new Error(`Reset failed: ${response.status}`);
                }
                
                const result = await response.json();
                
            } catch (error) {
                alert('Error resetting picks. Please try again.');
                return;
            }
            
            // Step 1: Capture the current state - what's at each position right now
            const currentPositions = [];
            const currentItems = sortableEl.querySelectorAll('.pick-item');
            
            currentItems.forEach((item, position) => {
                const gameId = item.getAttribute('data-game-id');
                const confidence = parseInt(item.getAttribute('data-confidence'));
                const isLocked = item.classList.contains('locked') || item.getAttribute('data-locked') === 'true';
                const selectedTeam = item.querySelector('input[name*="[selected_team]"]:checked')?.value;
                
                
                currentPositions.push({
                    position: position,
                    gameId: gameId,
                    confidence: confidence,
                    isLocked: isLocked,
                    selectedTeam: selectedTeam,
                    element: item.cloneNode(true)
                });
            });
            
            // Step 2: Clear the list
            sortableEl.innerHTML = '';
            
            // Step 3: Rebuild the list in the EXACT same order, but reset unlocked games
            currentPositions.forEach((positionData) => {
                let elementToAdd;
                
                if (positionData.isLocked) {
                    // Locked game: use exact same element (preserves everything)
                    elementToAdd = positionData.element;
                    console.log(`Restoring locked game ${positionData.gameId} at position ${positionData.position + 1} with confidence ${positionData.confidence}`);
                } else {
                    // Unlocked game: get original element and clear team selection
                    const originalGame = originalOrder.find(og => og.gameId === positionData.gameId);
                    if (originalGame) {
                        elementToAdd = originalGame.element.cloneNode(true);
                        // Clear team selections
                        elementToAdd.querySelectorAll('.team-option').forEach(teamOption => {
                            teamOption.classList.remove('selected');
                        });
                        elementToAdd.querySelectorAll('input[name*="[selected_team]"]').forEach(radio => {
                            radio.checked = false;
                        });
                    } else {
                        // Fallback: use current element but clear selections
                        elementToAdd = positionData.element;
                        elementToAdd.querySelectorAll('.team-option').forEach(teamOption => {
                            teamOption.classList.remove('selected');
                        });
                        elementToAdd.querySelectorAll('input[name*="[selected_team]"]').forEach(radio => {
                            radio.checked = false;
                        });
                    }
                }
                
                sortableEl.appendChild(elementToAdd);
            });
            
            // Step 4: Update confidence values to match positions (don't change positions, just update values)
            const totalGames = currentPositions.length;
            const restoredItems = sortableEl.querySelectorAll('.pick-item');
            
            // Get locked confidence values that we cannot use
            const lockedConfidences = new Set();
            currentPositions.forEach(pos => {
                if (pos.isLocked) {
                    lockedConfidences.add(pos.confidence);
                }
            });
            
            // Build available confidence values (excluding locked ones)
            const availableConfidences = [];
            for (let i = totalGames; i >= 1; i--) { // Start from highest
                if (!lockedConfidences.has(i)) {
                    availableConfidences.push(i);
                }
            }
            
            console.log(`Available confidences for unlocked games: [${availableConfidences.join(', ')}]`);
            
            // Assign confidence values: locked games keep theirs, unlocked games get next available
            let availableIndex = 0;
            restoredItems.forEach((item, position) => {
                const gameId = item.getAttribute('data-game-id');
                const isLocked = item.classList.contains('locked') || item.getAttribute('data-locked') === 'true';
                
                let confidenceValue;
                if (isLocked) {
                    // Keep existing confidence
                    confidenceValue = parseInt(item.getAttribute('data-confidence'));
                } else {
                    // Assign next available confidence
                    confidenceValue = availableConfidences[availableIndex++] || 1;
                    
                    // Update the DOM element
                    item.setAttribute('data-confidence', confidenceValue);
                    
                    const dropdown = item.querySelector('.confidence-dropdown');
                    const input = item.querySelector('.confidence-input');
                    
                    if (input) {
                        input.value = confidenceValue;
                    }
                    
                    if (dropdown) {
                        dropdown.value = confidenceValue;
                        // Ensure the option is selected
                        const targetOption = dropdown.querySelector(`option[value="${confidenceValue}"]`);
                        if (targetOption) {
                            targetOption.selected = true;
                        }
                    }
                }
            });
            
            // Step 5: Re-attach event handlers and update UI
            attachTeamSelectionHandlers();
            attachConfidenceHandlers();
            updateDropdownOptions();
            updatePicksSummary();
            
            // Auto-save
            setTimeout(() => {
                autoSave();
            }, 100);
            
        }
    });
    
    // League switcher navigation
    document.getElementById('league-switcher')?.addEventListener('change', function() {
        const leagueInfo = this.value;
        const [leagueId, entryId] = leagueInfo.split('/');
        
        // Debug logging
        console.log('League switcher: switching to', { leagueId, entryId, leagueInfo });
        
        // Remember the selected league in session storage for client-side persistence
        sessionStorage.setItem('selectedLeagueId', leagueId);
        if (entryId !== 'new') {
            sessionStorage.setItem('selectedEntryId', entryId);
        }
        
        const currentWeek = <%= week %>;
        
        // If switching back to a league with 'new' entry_id, try to find existing entry first
        if (entryId === 'new') {
            console.log('Handling new entry_id - attempting to find existing entry');
            // Add a client_league_id parameter to help the navigation middleware preserve context
            window.location.href = `/picks/${leagueId}/${entryId}?week=${currentWeek}&client_league_id=${leagueId}`;
        } else {
            window.location.href = `/picks/${leagueId}/${entryId}?week=${currentWeek}`;
        }
    });
    
    // Week selector navigation
    document.getElementById('week-selector')?.addEventListener('change', function() {
        const selectedWeek = this.value;
        const currentUrl = new URL(window.location);
        const pathParts = currentUrl.pathname.split('/');
        
        // Update the week in the URL path
        // Assuming URL structure like: /picks/[league_id]/[entry_id]/week/[week_number]
        // or /leagues/[league_id]/picks/week/[week_number]
        if (pathParts.includes('week')) {
            const weekIndex = pathParts.indexOf('week');
            if (weekIndex !== -1 && weekIndex < pathParts.length - 1) {
                pathParts[weekIndex + 1] = selectedWeek;
                currentUrl.pathname = pathParts.join('/');
            }
        } else {
            // If no 'week' in path, replace the query parameter
            currentUrl.searchParams.set('week', selectedWeek);
        }
        
        // Navigate to the new week
        window.location.href = currentUrl.toString();
    });
    
    // Quick selection buttons
    document.getElementById('select-all-home')?.addEventListener('click', function() {
        if (!<%= canEdit ? 'true' : 'false' %>) return;
        
        sortableEl.querySelectorAll('.pick-item').forEach(item => {
            const homeTeamOption = item.querySelector('.team-option[data-team]:last-of-type');
            if (homeTeamOption) {
                homeTeamOption.click();
            }
        });
        
        // Ensure confidence values are still correct after bulk selection
        setTimeout(() => {
            updatePicksSummary();
        }, 100);
    });
    
    document.getElementById('select-all-away')?.addEventListener('click', function() {
        if (!<%= canEdit ? 'true' : 'false' %>) return;
        
        sortableEl.querySelectorAll('.pick-item').forEach(item => {
            const awayTeamOption = item.querySelector('.team-option[data-team]:first-of-type');
            if (awayTeamOption) {
                awayTeamOption.click();
            }
        });
        
        // Ensure confidence values are still correct after bulk selection
        setTimeout(() => {
            updatePicksSummary();
        }, 100);
    });
    
    document.getElementById('select-all-favorites')?.addEventListener('click', function() {
        if (!<%= canEdit ? 'true' : 'false' %>) return;
        
        <% if (games) { %>
            const gameData = <%- JSON.stringify(games) %>;
            // Create a map of game_id to game data for reliable lookup
            const gameDataMap = new Map();
            gameData.forEach(game => {
                gameDataMap.set(game.game_id, game);
            });
            
            sortableEl.querySelectorAll('.pick-item').forEach(item => {
                const gameId = parseInt(item.getAttribute('data-game-id'));
                const game = gameDataMap.get(gameId);
                if (game && game.point_spread) {
                    // Favorite is the team with the negative spread (or home team if home_favorite is true)
                    const favoriteTeam = game.home_favorite ? game.home_team : game.away_team;
                    const favoriteOption = item.querySelector(`[data-team="${favoriteTeam}"]`);
                    if (favoriteOption) {
                        favoriteOption.click();
                    }
                }
            });
        <% } %>
    });
    
    document.getElementById('select-all-underdogs')?.addEventListener('click', function() {
        if (!<%= canEdit ? 'true' : 'false' %>) return;
        
        <% if (games) { %>
            const gameData = <%- JSON.stringify(games) %>;
            // Create a map of game_id to game data for reliable lookup
            const gameDataMap = new Map();
            gameData.forEach(game => {
                gameDataMap.set(game.game_id, game);
            });
            
            sortableEl.querySelectorAll('.pick-item').forEach(item => {
                const gameId = parseInt(item.getAttribute('data-game-id'));
                const game = gameDataMap.get(gameId);
                if (game && game.point_spread) {
                    // Underdog is the opposite of the favorite
                    const underdogTeam = game.home_favorite ? game.away_team : game.home_team;
                    const underdogOption = item.querySelector(`[data-team="${underdogTeam}"]`);
                    if (underdogOption) {
                        underdogOption.click();
                    }
                }
            });
        <% } %>
    });
    
    // Sort games by confidence on initial load to match saved order
    function initialSortByConfidence() {
        const items = Array.from(sortableEl.querySelectorAll('.pick-item'));
        
        // Sort by confidence points (highest to lowest)
        items.sort((a, b) => {
            const aConf = parseInt(a.getAttribute('data-confidence'));
            const bConf = parseInt(b.getAttribute('data-confidence'));
            return bConf - aConf;
        });
        
        // Reorder items in the DOM
        items.forEach(item => sortableEl.appendChild(item));
        
    }
    
    // Store original database order before any manipulation
    function storeOriginalOrder() {
        originalOrder = [];
        sortableEl.querySelectorAll('.pick-item').forEach((item, index) => {
            originalOrder.push({
                element: item.cloneNode(true),
                gameId: item.getAttribute('data-game-id'),
                originalIndex: index
            });
        });
    }
    
    // Store the original order first
    storeOriginalOrder();
    
    // Apply initial sort if there are saved picks
    const hasSavedPicks = sortableEl.querySelectorAll('input[name*="[selected_team]"]:checked').length > 0;
    if (hasSavedPicks) {
        initialSortByConfidence();
    }
    
    // Initialize summary
    updatePicksSummary();
    
    // Set Clean Sports theme as default
    document.documentElement.setAttribute('data-theme', 'clean_sports');
    
    // Dynamic team option width adjustment - ensure abbreviations are always visible
    function adjustTeamOptionsForWidth() {
        // Skip mobile adjustments - let CSS handle responsive constraints
        if (window.innerWidth <= 767) {
            return;
        }
        
        const teamContainers = document.querySelectorAll('.teams-container .d-flex');
        
        teamContainers.forEach(container => {
            const containerWidth = container.offsetWidth;
            const teamOptions = container.querySelectorAll('.team-option');
            const atSymbol = container.querySelector('.at-symbol');
            
            // Desktop only adjustments
            teamOptions.forEach(teamOption => {
                // Remove any inline styles to let CSS take control
                teamOption.style.minWidth = '';
                teamOption.style.maxWidth = '';
                teamOption.style.fontSize = '';
                teamOption.style.padding = '';
            });
            
            // Adjust @ symbol for desktop only
            if (atSymbol) {
                atSymbol.style.fontSize = '';
                atSymbol.style.padding = '';
            }
        });
    }
    
    // Run adjustment on load and resize
    adjustTeamOptionsForWidth();
    window.addEventListener('resize', adjustTeamOptionsForWidth);
});

</script>